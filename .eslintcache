[{"/Users/ming/code-work/ccc-react-paint/src/index.tsx":"1","/Users/ming/code-work/ccc-react-paint/src/CCCPaint.tsx":"2","/Users/ming/code-work/ccc-react-paint/src/util/toolType.ts":"3","/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/index.ts":"4","/Users/ming/code-work/ccc-react-paint/src/context/index.ts":"5","/Users/ming/code-work/ccc-react-paint/src/components/edit/index.tsx":"6","/Users/ming/code-work/ccc-react-paint/src/components/canvas/index.tsx":"7","/Users/ming/code-work/ccc-react-paint/src/util/tool/shape.ts":"8","/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/event.ts":"9","/Users/ming/code-work/ccc-react-paint/src/util/tool/tool.ts":"10","/Users/ming/code-work/ccc-react-paint/src/util/tool/index.ts":"11","/Users/ming/code-work/ccc-react-paint/src/util/snapshot/index.ts":"12","/Users/ming/code-work/ccc-react-paint/src/util/tool/pen.ts":"13","/Users/ming/code-work/ccc-react-paint/src/util/tool/colorExtract.ts":"14","/Users/ming/code-work/ccc-react-paint/src/util/tool/eraser.ts":"15","/Users/ming/code-work/ccc-react-paint/src/util/tool/Text.ts":"16","/Users/ming/code-work/ccc-react-paint/src/util/tool/colorFill.ts":"17","/Users/ming/code-work/ccc-react-paint/src/components/right/index.tsx":"18","/Users/ming/code-work/ccc-react-paint/src/components/tool/index.tsx":"19","/Users/ming/code-work/ccc-react-paint/src/components/right/pen/index.tsx":"20","/Users/ming/code-work/ccc-react-paint/src/components/right/formatColor/index.tsx":"21","/Users/ming/code-work/ccc-react-paint/src/components/right/showShape/index.tsx":"22","/Users/ming/code-work/ccc-react-paint/src/components/right/text/index.tsx":"23","/Users/ming/code-work/ccc-react-paint/src/components/right/components/colorPanel/index.tsx":"24","/Users/ming/code-work/ccc-react-paint/src/components/right/components/slider/index.tsx":"25","/Users/ming/code-work/ccc-react-paint/src/components/right/components/shape/index.tsx":"26","/Users/ming/code-work/ccc-react-paint/src/utils.tsx":"27","/Users/ming/code-work/ccc-react-paint/src/components/util.tsx":"28","/Users/ming/code-work/ccc-react-paint/src/components/edit/Resize.tsx":"29"},{"size":161,"mtime":1655098830734,"results":"30","hashOfConfig":"31"},{"size":5970,"mtime":1655199201131,"results":"32","hashOfConfig":"31"},{"size":918,"mtime":1655099997921,"results":"33","hashOfConfig":"31"},{"size":2010,"mtime":1654835133986,"results":"34","hashOfConfig":"31"},{"size":1418,"mtime":1655092109302,"results":"35","hashOfConfig":"31"},{"size":1610,"mtime":1655198386865,"results":"36","hashOfConfig":"31"},{"size":10553,"mtime":1655194466191,"results":"37","hashOfConfig":"31"},{"size":8172,"mtime":1654835133987,"results":"38","hashOfConfig":"31"},{"size":136,"mtime":1655092109303,"results":"39","hashOfConfig":"31"},{"size":3074,"mtime":1655190399460,"results":"40","hashOfConfig":"31"},{"size":247,"mtime":1654835133987,"results":"41","hashOfConfig":"31"},{"size":948,"mtime":1654835133986,"results":"42","hashOfConfig":"31"},{"size":2811,"mtime":1655127968288,"results":"43","hashOfConfig":"31"},{"size":1008,"mtime":1654835133987,"results":"44","hashOfConfig":"31"},{"size":2869,"mtime":1655128404570,"results":"45","hashOfConfig":"31"},{"size":3518,"mtime":1655130218456,"results":"46","hashOfConfig":"31"},{"size":3621,"mtime":1655092109303,"results":"47","hashOfConfig":"31"},{"size":1126,"mtime":1655194714830,"results":"48","hashOfConfig":"31"},{"size":2687,"mtime":1655194695048,"results":"49","hashOfConfig":"31"},{"size":731,"mtime":1655195793734,"results":"50","hashOfConfig":"31"},{"size":1126,"mtime":1655199458706,"results":"51","hashOfConfig":"31"},{"size":511,"mtime":1655194955942,"results":"52","hashOfConfig":"31"},{"size":3327,"mtime":1655121930089,"results":"53","hashOfConfig":"31"},{"size":1716,"mtime":1655100482691,"results":"54","hashOfConfig":"31"},{"size":887,"mtime":1655198363547,"results":"55","hashOfConfig":"31"},{"size":3642,"mtime":1655195168058,"results":"56","hashOfConfig":"31"},{"size":981,"mtime":1655191359413,"results":"57","hashOfConfig":"31"},{"size":8889,"mtime":1655197410641,"results":"58","hashOfConfig":"31"},{"size":2272,"mtime":1655197504002,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1tiwiaa",{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/Users/ming/code-work/ccc-react-paint/src/index.tsx",[],[],"/Users/ming/code-work/ccc-react-paint/src/CCCPaint.tsx",["124","125"],"import React, { Ref, useEffect, useImperativeHandle } from \"react\";\nimport Canvas from \"./components/canvas\";\nimport {\n  ToolTypeContext,\n  ShapeTypeContext,\n  ShapeOutlineContext,\n  LineWidthContext,\n  ColorContext,\n  FillContext,\n  TextContext,\n  SizeContext,\n  DispatcherContext\n} from \"./context\";\nimport \"./style.less\";\nimport { useState } from \"react\";\nimport { ColorType, LineWidthType, ShapeOutlineType, ShapeToolType, ToolType } from \"./util/toolType\";\nimport ToolPanel from \"./components/tool\";\nimport Dispatcher from \"./util/dispatcher\";\nimport Right from \"./components/right\";\nimport Edit from \"./components/edit\";\nimport { getImageSize } from \"./utils\";\n\ninterface PaintProps {\n  imgSrc?: string;\n  width?: number;\n  height?: number;\n  background?: string;\n  id?: string;\n  cRef?: any;\n  onClick?: (type: any) => void;\n}\n\nfunction Paint(props: PaintProps): JSX.Element {\n  const {\n    id = \"test\",\n    imgSrc = \"https://bafybeifbtjkiisih2voul3gzzy6mswi37ym2bwoz7wczeozdjufxntl65y.ipfs.dweb.link/orign.png\",\n    width,\n    height,\n    background,\n    onClick,\n    cRef\n  } = props;\n\n  const [toolType, setToolType] = useState<ToolType>(ToolType.PEN);\n  const [shapeType, setShapeType] = useState<ShapeToolType>(ShapeToolType.LINE);\n  const [shapeOutlineType, setShapeOutlineType] = useState<ShapeOutlineType>(ShapeOutlineType.SOLID);\n  const [lineWidthType, setLineWidthType] = useState<LineWidthType>(LineWidthType.LINESIZE);\n  const [lineSize, setLineFontSize] = useState<number>(1);\n  const [fillColor, setFillColor] = useState<string>(\"\");\n  const [size, setSize] = useState({ width, height });\n  const [activeColorType, setActiveColorType] = useState<ColorType>(ColorType.MAIN);\n  const [fontStyle, setFontStyle] = useState({});\n  const [mainColor, setMainColor] = useState<string>(\"black\");\n  const [subColor, setSubColor] = useState<string>(\"white\");\n  const [dispatcher] = useState(new Dispatcher());\n\n  const setColor = (value: string) => {\n    if (activeColorType === ColorType.MAIN) {\n      setMainColor(value);\n    } else {\n      setSubColor(value);\n    }\n  };\n\n  const loadImgSize = async () => {\n    const size: any = await getImageSize(imgSrc);\n    setSize(size);\n  };\n\n  useEffect(() => {\n    if (imgSrc) {\n      loadImgSize();\n    } else {\n      setSize({ width, height });\n    }\n  }, [width, height, imgSrc]);\n\n  useImperativeHandle(cRef, () => ({\n    getCurrentImageData: () => {\n      const canvasElem: any = document.getElementById(`ccc-paint-canvas ${id}`);\n      const imageData = canvasElem.toDataURL(\"image/png\");\n      return imageData;\n    }\n  }));\n\n  return (\n    <ToolTypeContext.Provider value={{ type: toolType, setType: setToolType }}>\n      <ShapeTypeContext.Provider\n        value={{\n          type: shapeType,\n          setType: (type: ShapeToolType) => {\n            setToolType(ToolType.SHAPE);\n            setShapeType(type);\n          }\n        }}\n      >\n        <ShapeOutlineContext.Provider value={{ type: shapeOutlineType, setType: setShapeOutlineType }}>\n          <LineWidthContext.Provider\n            value={{\n              type: lineWidthType,\n              lineSize: lineSize,\n              setType: setLineWidthType,\n              setLineSize: setLineFontSize\n            }}\n          >\n            <DispatcherContext.Provider value={{ dispatcher }}>\n              <ColorContext.Provider\n                value={{\n                  mainColor,\n                  subColor,\n                  activeColor: activeColorType,\n                  setColor,\n                  setActiveColor: setActiveColorType\n                }}\n              >\n                <SizeContext.Provider value={{ size, onSize: setSize }}>\n                  <FillContext.Provider\n                    value={{\n                      fillColor,\n                      setFillColor\n                    }}\n                  >\n                    <TextContext.Provider\n                      value={{\n                        fontStyle,\n                        setFont: setFontStyle\n                      }}\n                    >\n                      <div className=\"ccc\">\n                        <div className=\"ccc-edit\">\n                          <Edit CanvasSize={size} />\n                        </div>\n                        <div className=\"ccc-content\">\n                          <div className=\"ToolPanel\">\n                            <ToolPanel className=\"toolbar-item\" fillColor={fillColor} />\n                          </div>\n                          <div className=\"show-Canvas\">\n                            <Canvas\n                              id={id}\n                              CanvasSize={size}\n                              imgSrc={imgSrc}\n                              background={background}\n                              onSize={setSize}\n                              fillColor={fillColor}\n                              toolType={toolType}\n                              fontStyle={fontStyle}\n                              shapeType={shapeType}\n                              shapeOutlineType={shapeOutlineType}\n                              mainColor={mainColor}\n                              subColor={subColor}\n                              lineSize={lineSize}\n                              lineWidthType={lineWidthType}\n                              setColor={setColor}\n                            />\n                          </div>\n                          <div className=\"show-type\">\n                            <Right toolType={toolType} />\n                          </div>\n                        </div>\n                      </div>\n                    </TextContext.Provider>\n                  </FillContext.Provider>\n                </SizeContext.Provider>\n              </ColorContext.Provider>\n            </DispatcherContext.Provider>\n          </LineWidthContext.Provider>\n        </ShapeOutlineContext.Provider>\n      </ShapeTypeContext.Provider>\n    </ToolTypeContext.Provider>\n  );\n}\n\nexport default Paint;\n","/Users/ming/code-work/ccc-react-paint/src/util/toolType.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/context/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/components/edit/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/canvas/index.tsx",["126","127","128","129"],"import React, { useMemo } from \"react\";\nimport \"./index.less\";\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { LineWidthType, ShapeOutlineType, ShapeToolType, ToolType } from \"../../util/toolType\";\nimport { FC } from \"react\";\nimport { useState } from \"react\";\nimport { Pen, Tool, Eraser, ColorExtract, ColorFill, Text } from \"../../util/tool\";\nimport Shape from \"../../util/tool/shape\";\nimport { useContext } from \"react\";\nimport { DispatcherContext } from \"../../context\";\nimport { CLEAR_EVENT, REDO_EVENT, UNDO_EVENT } from \"../../util/dispatcher/event\";\nimport SnapShot from \"../../util/snapshot\";\nimport Snapshot from \"../../util/snapshot\";\nimport { Input } from \"antd\";\n\nconst { TextArea } = Input;\n\ninterface CanvasProps {\n  toolType: ToolType;\n  shapeType: ShapeToolType;\n  shapeOutlineType: ShapeOutlineType;\n  lineWidthType: LineWidthType;\n  mainColor: string;\n  subColor: string;\n  lineSize?: number;\n  fillColor: string;\n  fontStyle: any;\n  imgSrc?: string;\n  CanvasSize: any;\n  id: string;\n  background?: string;\n  onSize?: (value: any) => void;\n  setColor: (value: string) => void;\n}\n\nconst Canvas: FC<CanvasProps> = (props) => {\n  const {\n    id,\n    toolType,\n    lineWidthType,\n    mainColor,\n    subColor,\n    setColor,\n    CanvasSize,\n    fillColor,\n    shapeType,\n    shapeOutlineType,\n    fontStyle,\n    imgSrc,\n    background,\n    lineSize = 1,\n    onSize\n  } = props;\n  const [tool, setTool] = useState<Tool>();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const allCanvasRef = useRef<HTMLDivElement>(null);\n  const dispatcherContext = useContext(DispatcherContext);\n  const [snapshot] = useState<SnapShot>(new Snapshot());\n\n  useEffect(() => {\n    switch (toolType) {\n      case ToolType.PEN:\n        setTool(new Pen());\n        break;\n      case ToolType.ERASER:\n        setTool(new Eraser(lineSize));\n        //  setTool(new ColorExtract(setColor));\n        break;\n      case ToolType.COLOR_EXTRACT:\n        setTool(new ColorExtract(setColor));\n        break;\n      case ToolType.COLOR_FILL:\n        setTool(new ColorFill());\n        break;\n      case ToolType.TEXT:\n        setTool(new Text(fontStyle));\n        break;\n      case ToolType.SHAPE:\n        setTool(new Shape(shapeType, shapeOutlineType === ShapeOutlineType.DOTTED));\n        break;\n      default:\n        break;\n    }\n  }, [toolType, shapeType, fontStyle]);\n\n  useEffect(() => {\n    if (tool instanceof Shape) {\n      tool.isDashed = shapeOutlineType === ShapeOutlineType.DOTTED;\n    }\n  }, [shapeOutlineType]);\n\n  useEffect(() => {\n    switch (lineWidthType) {\n      case LineWidthType.THIN:\n        Tool.lineWidthFactor = 1;\n        break;\n      case LineWidthType.MIDDLE:\n        Tool.lineWidthFactor = 2;\n        break;\n      case LineWidthType.BOLD:\n        Tool.lineWidthFactor = 3;\n        break;\n      case LineWidthType.MAXBOLD:\n        Tool.lineWidthFactor = 4;\n        break;\n      case LineWidthType.LINESIZE:\n        Tool.lineWidthFactor = lineSize;\n        break;\n      default:\n        break;\n    }\n  }, [lineWidthType, lineSize]);\n\n  useEffect(() => {\n    Tool.mainColor = mainColor;\n  }, [mainColor]);\n\n  useEffect(() => {\n    Tool.fillColor = fillColor;\n  }, [fillColor]);\n\n  useEffect(() => {\n    Tool.subColor = subColor;\n  }, [subColor]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n      canvas.height = height;\n      canvas.width = width;\n      Tool.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        if (imgSrc) {\n          const img = new Image();\n          img.crossOrigin = \"anonymous\";\n          img.src = imgSrc;\n          img.onload = function () {\n            canvas.height = img.height;\n            canvas.width = img.width;\n            /*1.在canvas 中绘制图像*/\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          };\n        } else {\n          ctx.fillStyle = background || \"white\";\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n        if (ctx.getImageData) snapshot.add(ctx.getImageData(0, 0, width, height));\n      }\n\n      // 注册清空画布事件\n      const dispatcher = dispatcherContext.dispatcher;\n      const callback = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          if (imgSrc) {\n            const img = new Image();\n            img.crossOrigin = \"anonymous\";\n            img.src = imgSrc;\n            img.onload = function () {\n              const { width, height } = img;\n              /*1.在canvas 中绘制图像*/\n              ctx.drawImage(img, 0, 0);\n              /*2.从canvas 中获取图像的ImageData*/\n              const imgData = ctx.getImageData(0, 0, width, height);\n              /*3.在canvas 中显示ImageData*/\n              ctx.putImageData(\n                imgData,\n                //位置\n                0,\n                height\n              );\n            };\n          } else {\n            ctx.fillStyle = \"white\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n          }\n        }\n      };\n      dispatcher.on(CLEAR_EVENT, callback);\n\n      // 注册画布前进事件\n      const forward = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          const imageData = snapshot.forward();\n          if (imageData) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n        }\n      };\n      dispatcher.on(REDO_EVENT, forward);\n\n      // 注册画布后退事件\n      const back = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          const imageData = snapshot.back();\n          if (imageData) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n        }\n      };\n      dispatcher.on(UNDO_EVENT, back);\n\n      const changeSize = () => {\n        const canvasData = Tool.ctx.getImageData(0, 0, canvas.width, canvas.height);\n        canvasPain(Tool.ctx, width, height, canvasData);\n      };\n      window.addEventListener(\"resize\", changeSize);\n\n      return () => {\n        dispatcher.off(CLEAR_EVENT, callback);\n      };\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        const canvasData = ctx?.getImageData(0, 0, canvas.width, canvas.height);\n        const height = CanvasSize.height;\n        const width = CanvasSize.width;\n        if (width && height) {\n          canvas.height = height;\n          canvas.width = width;\n          Tool.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n          canvasPain(Tool.ctx, width, height, canvasData);\n        }\n      }\n    }\n  }, [CanvasSize]);\n\n  // 注册画布size事件\n  const canvasPain = (ctx: any, width: number, height: number, canvasData: any) => {\n    if (ctx) {\n      //ctx.fillRect(0, 0, width, height);\n      if (canvasData && imgSrc) {\n        if (canvasData.width !== width || canvasData.height !== height) {\n          const scaleX = width / canvasData.width;\n          const scaleY = height / canvasData.height;\n          // ctx.scale(0, 0, scaleX, scaleY);\n          //ctx.setTransform(scaleX, scaleY, width, height);\n          ctx.putImageData(canvasData, 0, 0);\n        } else {\n          ctx.putImageData(canvasData, 0, 0);\n        }\n      } else {\n        snapshot.add(ctx.getImageData(0, 0, width, height));\n      }\n    }\n  };\n\n  const onMouseDown = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseDown(event);\n    }\n  };\n\n  const onMouseMove = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseMove(event);\n    }\n  };\n\n  const onMouseUp = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseUp(event);\n\n      // 存储canvas剪影\n      snapshot.add(Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height));\n    }\n  };\n\n  const onTouchStart = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchStart(event);\n    }\n  };\n\n  const onTouchMove = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchMove(event);\n    }\n  };\n\n  const onTouchEnd = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchEnd(event);\n    }\n\n    // 存储canvas剪影\n    snapshot.add(Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height));\n  };\n\n  // const onMousewheel = (e: any) => {\n  //   console.log(\"=====57\", e);\n  //   const canvas = canvasRef.current;\n  //   if (canvas) {\n  //     const ctx = canvas.getContext(\"2d\");\n  //   }\n  // };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.addEventListener(\"mousedown\", onMouseDown);\n      canvas.addEventListener(\"mousemove\", onMouseMove);\n      canvas.addEventListener(\"mouseup\", onMouseUp);\n      // canvas.addEventListener(\"mousewheel\", onMousewheel);\n\n      canvas.addEventListener(\"touchstart\", onTouchStart);\n      canvas.addEventListener(\"touchmove\", onTouchMove);\n      canvas.addEventListener(\"touchend\", onTouchEnd);\n\n      return () => {\n        canvas.removeEventListener(\"mousedown\", onMouseDown);\n        canvas.removeEventListener(\"mousemove\", onMouseMove);\n        canvas.removeEventListener(\"mouseup\", onMouseUp);\n        // canvas.removeEventListener(\"mousewheel\", onMousewheel);\n\n        canvas.removeEventListener(\"touchstart\", onTouchStart);\n        canvas.removeEventListener(\"touchmove\", onTouchMove);\n        canvas.removeEventListener(\"touchend\", onTouchEnd);\n      };\n    }\n  }, [canvasRef, onMouseDown, onMouseMove, onMouseUp]);\n\n  const style = {\n    margin: \"auto\"\n  };\n  if (allCanvasRef && CanvasSize) {\n    const allCanvas = allCanvasRef.current;\n    if (allCanvas) {\n      style.margin = allCanvas.offsetWidth < CanvasSize.width ? \"unset\" : \"auto\";\n    }\n  }\n  return (\n    <div className=\"all-canvas\" ref={allCanvasRef}>\n      <canvas\n        id={`ccc-paint-canvas ${id}`}\n        className=\"ccc-paint-canvas\"\n        ref={canvasRef}\n        width={\"100%\"}\n        height={\"100%\"}\n        style={{ background: background || \"#fff\", ...style }}\n      ></canvas>\n      <div\n        className=\"canvas-text\"\n        id=\"canvas-text\"\n        style={{ width: CanvasSize.width, height: CanvasSize.height, ...style }}\n      >\n        <TextArea id=\"textBox\" name=\"story\" autoFocus={true} className=\"text-box\" rows={1} />\n      </div>\n    </div>\n  );\n};\n\nexport default Canvas;\n","/Users/ming/code-work/ccc-react-paint/src/util/tool/shape.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/event.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/tool.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/snapshot/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/pen.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/colorExtract.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/eraser.ts",["130"],"import { ColorType } from \"../toolType\";\nimport Tool, { Point, getMousePos, getPixelColorOnCanvas, getTouchPos, hexToRgb, updateImageData } from \"./tool\";\nclass Eraser extends Tool {\n  protected lineWidthBase = 1;\n  private mouseDown = false;\n  private color = \"\";\n  private saveImageData?: ImageData;\n  private previousPos: Point = {\n    x: 0,\n    y: 0\n  };\n  public constructor(lineSize = 1) {\n    super();\n    this.lineWidthBase = lineSize;\n    this.color = \"\";\n  }\n  private operateStart(pos: Point) {\n    if (!Tool.ctx) return;\n    this.saveImageData = Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height);\n    this.mouseDown = true;\n    this.color = getPixelColorOnCanvas(Tool.ctx, pos.x - this.lineWidthBase, pos.y - this.lineWidthBase);\n    Tool.ctx.lineWidth = 3 * this.lineWidthBase;\n    Tool.ctx.strokeStyle = this.color;\n    Tool.ctx.lineJoin = \"round\";\n    Tool.ctx.lineCap = \"round\";\n    Tool.ctx.beginPath();\n    this.previousPos = pos;\n  }\n  private operateMove(pos: Point) {\n    if (this.mouseDown) {\n      Tool.ctx.moveTo(this.previousPos.x, this.previousPos.y);\n      const c = 0.5 * (this.previousPos.x + pos.x);\n      const d = 0.5 * (this.previousPos.y + pos.y);\n      Tool.ctx.quadraticCurveTo(c, d, pos.x, pos.y);\n      Tool.ctx.stroke();\n      this.previousPos = pos;\n    }\n  }\n  private operateEnd() {\n    if (this.mouseDown) {\n      Tool.ctx.closePath();\n      this.mouseDown = false;\n      let imageData = Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height);\n      const colorRgb = hexToRgb(this.color);\n      if (colorRgb && this.saveImageData) {\n        imageData = updateImageData(this.saveImageData, imageData, [colorRgb.r, colorRgb.g, colorRgb.b, colorRgb.a]);\n\n        Tool.ctx.putImageData(imageData, 0, 0);\n      }\n    }\n  }\n  public onMouseDown(event: MouseEvent): void {\n    event.preventDefault();\n\n    const mousePos = getMousePos(Tool.ctx.canvas, event);\n\n    this.operateStart(mousePos);\n  }\n\n  public onMouseUp(event: MouseEvent): void {\n    event.preventDefault();\n    this.operateEnd();\n  }\n\n  public onMouseMove(event: MouseEvent): void {\n    event.preventDefault();\n    const mousePos = getMousePos(Tool.ctx.canvas, event);\n    this.operateMove(mousePos);\n  }\n\n  public onTouchStart(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    const touchPos = getTouchPos(event.target as HTMLCanvasElement, event);\n    this.operateStart(touchPos);\n  }\n\n  public onTouchMove(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    const touchPos = getTouchPos(event.target as HTMLCanvasElement, event);\n    this.operateMove(touchPos);\n  }\n\n  public onTouchEnd(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    this.operateEnd();\n  }\n}\n\nexport default Eraser;\n","/Users/ming/code-work/ccc-react-paint/src/util/tool/Text.ts",["131","132"],"import Tool from \"./tool\";\n\n// interface propsInput = {\n//             x?: number,\n//             y?: Number,\n//             maxWidth?:Number\n// }\n\nclass Text extends Tool {\n  private isMouseDown = false;\n  private saveImageData?: ImageData;\n  private _x: number;\n  private _y: number;\n  private textContent: string;\n  private textBox: any;\n  private fontStyle: any;\n  private canvas: any;\n  private canvasText: any;\n  public constructor(fontType: any) {\n    super();\n    this._x = NaN;\n    this._y = NaN;\n    this.textBox = document.getElementById(\"textBox\");\n    this.canvasText = document.getElementById(\"canvas-text\");\n\n    this.textContent = \"\";\n    this.fontStyle = fontType;\n  }\n\n  private drawing(x: number, y: number) {\n    const context = Tool.ctx;\n    if (!context) {\n      return;\n    } else {\n      // 设置画笔的颜色和大小\n      context.fillStyle = \"#000\"; // 填充颜色为红色\n      context.lineWidth = 5; // 指定描边线的宽度\n      context.font = \"10px\";\n      if (context && this.fontStyle) {\n        const { fontSize = \"12px\", fontFamily, letterSpacing } = this.fontStyle;\n        context.fillStyle = this.textBox.color || \"#000\";\n        context.font = `${fontSize} ${fontFamily}`;\n        if (context.canvas && letterSpacing) {\n          context.canvas.style.letterSpacing = letterSpacing;\n        }\n      }\n\n      // 写字\n      //   const width = this.canvas.offsetWidth;\n      //   console.log(\"----546\", this.canvas);\n      //   const height = this.canvas.offsetHeight;\n      //   const tempImg = new Image();\n      //   tempImg.width = width;\n      //   tempImg.height = height;\n      //   tempImg.onload = function () {\n      //     // 把img绘制在canvas画布上\n      //     context.drawImage(tempImg, 0, 0, width, height);\n      //   };\n      //   (tempImg.src =\n      //     'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"><foreignObject width=\"' +\n      //     width +\n      //     '\" height=\"' +\n      //     height +\n      //     '\"><body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;font:' +\n      //     context.font +\n      //     ';\">' +\n      //     this.textContent),\n      //     +\"</body></foreignObject></svg>\";\n      context.fillText(this.textContent, parseInt(this.textBox.style.left), parseInt(this.textBox.style.top));\n      // this.wrapText(this.textContent, parseInt(this.textBox.style.left), parseInt(this.textBox.style.top));\n    }\n  }\n\n  public onMouseDown(event: MouseEvent): void {\n    // 鼠标按下位置保存\n\n    event.preventDefault();\n    if (this.isMouseDown) {\n      this.textContent = this.textBox.value;\n      this.isMouseDown = false;\n      this.textBox.style[\"z-index\"] = -1;\n      this.canvasText.style[\"z-index\"] = -1;\n      this.textBox.style.visibility = \"hidden\";\n      this.drawing(this._x, this._y);\n      this.textBox.value = \"\";\n    } else if (!this.isMouseDown) {\n      this._x = event.offsetX; // 鼠标按下时保存当前位置，为起始位置\n      this._y = event.offsetY;\n      this.isMouseDown = true;\n      this.textBox.value = \"\";\n      if (typeof this.fontStyle === \"object\") {\n        Object.keys(this.fontStyle).forEach((va) => {\n          this.textBox.style[va] = this.fontStyle[va];\n        });\n      }\n      this.canvasText.style[\"z-index\"] = 5;\n      this.textBox.style[\"z-index\"] = 6;\n      this.textBox.style.visibility = \"visible\";\n      this.textBox.style.left = this._x + \"px\";\n      this.textBox.style.top = this._y + \"px\";\n    }\n  }\n}\n\nexport default Text;\n","/Users/ming/code-work/ccc-react-paint/src/util/tool/colorFill.ts",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/tool/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/pen/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/formatColor/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/showShape/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/text/index.tsx",["133"],"import React from \"react\";\nimport { useContext } from \"react\";\nimport { TextContext, ColorContext } from \"@/context\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport \"./index.less\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Select } from \"antd\";\nimport IntegerStep from \"../components/slider\";\nimport { useMemo } from \"react\";\n\nconst { Option } = Select;\n\ninterface FormatColor {\n  className?: string;\n}\n\nconst textFamily = [\n  \"Barlow-ExtraBold\",\n  \"DIN-AlternateBold\",\n  \"Trebuchet-MSBold\",\n  \"Trebuchet-MS\",\n  \"Poppins-Bold\",\n  \"Poppins-Light\",\n  \"Poppins-Medium\",\n  \"Poppins-Regular\",\n  \"Poppins-SemiBold\"\n];\n\nconst FormatColor: React.FC<FormatColor> = (props) => {\n  const { className } = props;\n  const [pickerColor, setPickerColor] = useState(createColor(\"#000000FF\"));\n  const TextToolContext = useContext(TextContext);\n  const colorContext = useContext(ColorContext);\n\n  const fontStyle = useMemo(() => {\n    return TextToolContext.fontStyle;\n  }, [TextToolContext.fontStyle]);\n\n  const activeColorType = colorContext.activeColor;\n\n  useEffect(() => {\n    colorContext.setColor(`#${pickerColor.hex}`);\n  }, [pickerColor]);\n\n  return (\n    <div className={className ? ` ccc-text formatColor ${className}` : \"ccc-text colorpanel\"}>\n      <div className=\"content\">\n        <div className=\"font\">\n          <h3>Font</h3>\n          <Select\n            className=\"ccc-text-family\"\n            onChange={(value: string) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontFamily: value\n              });\n            }}\n          >\n            {textFamily.map((va) => {\n              return (\n                <Option key={va} value={va}>\n                  {va}\n                </Option>\n              );\n            })}\n          </Select>\n        </div>\n        <div className=\"font\">\n          <h3>Letter Spacing</h3>\n          <IntegerStep\n            min={1}\n            max={8}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                letterSpacing: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>Font Size</h3>\n          <IntegerStep\n            min={12}\n            max={72}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontSize: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>FLine Height</h3>\n          <IntegerStep\n            min={24}\n            max={56}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                lineHeight: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <h3>color</h3>\n        <div className=\"material-color-box\">\n          <ColorBox\n            value={pickerColor}\n            disableAlpha={false}\n            onChange={(color) => {\n              setPickerColor(color);\n              TextToolContext.setFont({\n                ...fontStyle,\n                color: \"#\" + color.hex\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormatColor;\n","/Users/ming/code-work/ccc-react-paint/src/components/right/components/colorPanel/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/components/slider/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/components/shape/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/utils.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/util.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/edit/Resize.tsx",[],{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":20},{"ruleId":"134","severity":1,"message":"138","line":40,"column":5,"nodeType":"136","messageId":"137","endLine":40,"endColumn":12},{"ruleId":"134","severity":1,"message":"139","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":24},{"ruleId":"134","severity":1,"message":"140","line":53,"column":5,"nodeType":"136","messageId":"137","endLine":53,"endColumn":11},{"ruleId":"134","severity":1,"message":"141","line":247,"column":17,"nodeType":"136","messageId":"137","endLine":247,"endColumn":23},{"ruleId":"134","severity":1,"message":"142","line":248,"column":17,"nodeType":"136","messageId":"137","endLine":248,"endColumn":23},{"ruleId":"134","severity":1,"message":"143","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":19},{"ruleId":"134","severity":1,"message":"144","line":30,"column":19,"nodeType":"136","messageId":"137","endLine":30,"endColumn":28},{"ruleId":"134","severity":1,"message":"145","line":30,"column":30,"nodeType":"136","messageId":"137","endLine":30,"endColumn":39},{"ruleId":"134","severity":1,"message":"146","line":40,"column":9,"nodeType":"136","messageId":"137","endLine":40,"endColumn":24},"@typescript-eslint/no-unused-vars","'Ref' is defined but never used.","Identifier","unusedVar","'onClick' is assigned a value but never used.","'useMemo' is defined but never used.","'onSize' is assigned a value but never used.","'scaleX' is assigned a value but never used.","'scaleY' is assigned a value but never used.","'ColorType' is defined but never used.","'x' is defined but never used.","'y' is defined but never used.","'activeColorType' is assigned a value but never used."]