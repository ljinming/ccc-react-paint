[{"/Users/ming/code-work/ccc-react-paint/src/index.tsx":"1","/Users/ming/code-work/ccc-react-paint/src/CCCPaint.tsx":"2","/Users/ming/code-work/ccc-react-paint/src/util/toolType.ts":"3","/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/index.ts":"4","/Users/ming/code-work/ccc-react-paint/src/context/index.ts":"5","/Users/ming/code-work/ccc-react-paint/src/components/edit/index.tsx":"6","/Users/ming/code-work/ccc-react-paint/src/components/canvas/index.tsx":"7","/Users/ming/code-work/ccc-react-paint/src/util/tool/shape.ts":"8","/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/event.ts":"9","/Users/ming/code-work/ccc-react-paint/src/util/tool/tool.ts":"10","/Users/ming/code-work/ccc-react-paint/src/util/tool/index.ts":"11","/Users/ming/code-work/ccc-react-paint/src/util/snapshot/index.ts":"12","/Users/ming/code-work/ccc-react-paint/src/util/tool/pen.ts":"13","/Users/ming/code-work/ccc-react-paint/src/util/tool/colorExtract.ts":"14","/Users/ming/code-work/ccc-react-paint/src/util/tool/eraser.ts":"15","/Users/ming/code-work/ccc-react-paint/src/util/tool/Text.ts":"16","/Users/ming/code-work/ccc-react-paint/src/util/tool/colorFill.ts":"17","/Users/ming/code-work/ccc-react-paint/src/components/edit/other/index.tsx":"18","/Users/ming/code-work/ccc-react-paint/src/components/edit/other/Resize.tsx":"19","/Users/ming/code-work/ccc-react-paint/src/components/right/index.tsx":"20","/Users/ming/code-work/ccc-react-paint/src/components/tool/index.tsx":"21","/Users/ming/code-work/ccc-react-paint/src/components/right/pen/index.tsx":"22","/Users/ming/code-work/ccc-react-paint/src/components/right/formatColor/index.tsx":"23","/Users/ming/code-work/ccc-react-paint/src/components/right/showShape/index.tsx":"24","/Users/ming/code-work/ccc-react-paint/src/components/right/text/index.tsx":"25","/Users/ming/code-work/ccc-react-paint/src/components/right/components/colorPanel/index.tsx":"26","/Users/ming/code-work/ccc-react-paint/src/components/right/components/slider/index.tsx":"27","/Users/ming/code-work/ccc-react-paint/src/components/right/components/shape/index.tsx":"28","/Users/ming/code-work/ccc-react-paint/src/components/canvas/utils.tsx":"29"},{"size":161,"mtime":1655098830734,"results":"30","hashOfConfig":"31"},{"size":5599,"mtime":1655128415595,"results":"32","hashOfConfig":"31"},{"size":918,"mtime":1655099997921,"results":"33","hashOfConfig":"31"},{"size":2010,"mtime":1654835133986,"results":"34","hashOfConfig":"31"},{"size":1418,"mtime":1655092109302,"results":"35","hashOfConfig":"31"},{"size":239,"mtime":1655100299245,"results":"36","hashOfConfig":"31"},{"size":9859,"mtime":1655129127145,"results":"37","hashOfConfig":"31"},{"size":8172,"mtime":1654835133987,"results":"38","hashOfConfig":"31"},{"size":136,"mtime":1655092109303,"results":"39","hashOfConfig":"31"},{"size":3074,"mtime":1654835133987,"results":"40","hashOfConfig":"31"},{"size":247,"mtime":1654835133987,"results":"41","hashOfConfig":"31"},{"size":948,"mtime":1654835133986,"results":"42","hashOfConfig":"31"},{"size":2811,"mtime":1655127968288,"results":"43","hashOfConfig":"31"},{"size":1008,"mtime":1654835133987,"results":"44","hashOfConfig":"31"},{"size":2869,"mtime":1655128404570,"results":"45","hashOfConfig":"31"},{"size":3518,"mtime":1655130218456,"results":"46","hashOfConfig":"31"},{"size":3621,"mtime":1655092109303,"results":"47","hashOfConfig":"31"},{"size":1341,"mtime":1655100375380,"results":"48","hashOfConfig":"31"},{"size":2268,"mtime":1655130672497,"results":"49","hashOfConfig":"31"},{"size":1141,"mtime":1655100137505,"results":"50","hashOfConfig":"31"},{"size":3213,"mtime":1655131440725,"results":"51","hashOfConfig":"31"},{"size":731,"mtime":1655114459818,"results":"52","hashOfConfig":"31"},{"size":1126,"mtime":1655100256887,"results":"53","hashOfConfig":"31"},{"size":535,"mtime":1655099829259,"results":"54","hashOfConfig":"31"},{"size":3327,"mtime":1655121930089,"results":"55","hashOfConfig":"31"},{"size":1716,"mtime":1655100482691,"results":"56","hashOfConfig":"31"},{"size":936,"mtime":1655122075566,"results":"57","hashOfConfig":"31"},{"size":3996,"mtime":1655122122073,"results":"58","hashOfConfig":"31"},{"size":628,"mtime":1655115662327,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1tiwiaa",{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"/Users/ming/code-work/ccc-react-paint/src/index.tsx",[],[],"/Users/ming/code-work/ccc-react-paint/src/CCCPaint.tsx",["124"],"import React, { Ref, useImperativeHandle } from \"react\";\nimport Canvas from \"./components/canvas\";\nimport {\n  ToolTypeContext,\n  ShapeTypeContext,\n  ShapeOutlineContext,\n  LineWidthContext,\n  ColorContext,\n  FillContext,\n  TextContext,\n  SizeContext,\n  DispatcherContext\n} from \"./context\";\nimport \"./style.less\";\nimport { useState } from \"react\";\nimport { ColorType, LineWidthType, ShapeOutlineType, ShapeToolType, ToolType } from \"./util/toolType\";\nimport ToolPanel from \"./components/tool\";\nimport Dispatcher from \"./util/dispatcher\";\nimport Right from \"./components/right\";\nimport Edit from \"./components/edit\";\n\ninterface PaintProps {\n  imgSrc?: string;\n  width?: number;\n  height?: number;\n  background?: string;\n  id?: string;\n  cRef?: any;\n  onClick?: (type: any) => void;\n}\n\nfunction Paint(props: PaintProps): JSX.Element {\n  const { id = \"test\", imgSrc, width, height, background, onClick, cRef } = props;\n  const [toolType, setToolType] = useState<ToolType>(ToolType.PEN);\n  const [shapeType, setShapeType] = useState<ShapeToolType>(ShapeToolType.LINE);\n  const [shapeOutlineType, setShapeOutlineType] = useState<ShapeOutlineType>(ShapeOutlineType.SOLID);\n  const [lineWidthType, setLineWidthType] = useState<LineWidthType>(LineWidthType.LINESIZE);\n  const [lineSize, setLineFontSize] = useState<number>(1);\n  const [fillColor, setFillColor] = useState<string>(\"\");\n  const [size, setSize] = useState({ width, height });\n  const [activeColorType, setActiveColorType] = useState<ColorType>(ColorType.MAIN);\n  const [fontStyle, setFontStyle] = useState({});\n  const [mainColor, setMainColor] = useState<string>(\"black\");\n  const [subColor, setSubColor] = useState<string>(\"white\");\n  const [dispatcher] = useState(new Dispatcher());\n\n  const setColor = (value: string) => {\n    if (activeColorType === ColorType.MAIN) {\n      setMainColor(value);\n    } else {\n      setSubColor(value);\n    }\n  };\n\n  useImperativeHandle(cRef, () => ({\n    getCurrentImageData: () => {\n      const canvasElem: any = document.getElementById(`ccc-paint-canvas ${id}`);\n      const imageData = canvasElem.toDataURL(\"image/png\");\n      return imageData;\n    }\n  }));\n\n  return (\n    <ToolTypeContext.Provider value={{ type: toolType, setType: setToolType }}>\n      <ShapeTypeContext.Provider\n        value={{\n          type: shapeType,\n          setType: (type: ShapeToolType) => {\n            setToolType(ToolType.SHAPE);\n            setShapeType(type);\n          }\n        }}\n      >\n        <ShapeOutlineContext.Provider value={{ type: shapeOutlineType, setType: setShapeOutlineType }}>\n          <LineWidthContext.Provider\n            value={{\n              type: lineWidthType,\n              lineSize: lineSize,\n              setType: setLineWidthType,\n              setLineSize: setLineFontSize\n            }}\n          >\n            <DispatcherContext.Provider value={{ dispatcher }}>\n              <ColorContext.Provider\n                value={{\n                  mainColor,\n                  subColor,\n                  activeColor: activeColorType,\n                  setColor,\n                  setActiveColor: setActiveColorType\n                }}\n              >\n                <SizeContext.Provider value={{ size, onSize: setSize }}>\n                  <FillContext.Provider\n                    value={{\n                      fillColor,\n                      setFillColor\n                    }}\n                  >\n                    <TextContext.Provider\n                      value={{\n                        fontStyle,\n                        setFont: setFontStyle\n                      }}\n                    >\n                      <div className=\"ccc\">\n                        <div className=\"ccc-edit\">\n                          <Edit />\n                        </div>\n                        <div className=\"ccc-content\">\n                          <div className=\"ToolPanel\">\n                            <ToolPanel className=\"toolbar-item\" />\n                          </div>\n                          <div className=\"show-Canvas\">\n                            <Canvas\n                              id={id}\n                              CanvasSize={size}\n                              imgSrc={imgSrc}\n                              background={background}\n                              onClick={onClick}\n                              CanvasWidth={width}\n                              CanvasHeight={height}\n                              fillColor={fillColor}\n                              toolType={toolType}\n                              fontStyle={fontStyle}\n                              shapeType={shapeType}\n                              shapeOutlineType={shapeOutlineType}\n                              mainColor={mainColor}\n                              subColor={subColor}\n                              lineSize={lineSize}\n                              lineWidthType={lineWidthType}\n                              setColor={setColor}\n                            />\n                          </div>\n                          <div className=\"show-type\">\n                            <Right toolType={toolType} />\n                          </div>\n                        </div>\n                      </div>\n                    </TextContext.Provider>\n                  </FillContext.Provider>\n                </SizeContext.Provider>\n              </ColorContext.Provider>\n            </DispatcherContext.Provider>\n          </LineWidthContext.Provider>\n        </ShapeOutlineContext.Provider>\n      </ShapeTypeContext.Provider>\n    </ToolTypeContext.Provider>\n  );\n}\n\nexport default Paint;\n","/Users/ming/code-work/ccc-react-paint/src/util/toolType.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/context/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/components/edit/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/canvas/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/shape.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/event.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/tool.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/snapshot/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/pen.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/colorExtract.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/eraser.ts",["125"],"import { ColorType } from \"../toolType\";\nimport Tool, { Point, getMousePos, getPixelColorOnCanvas, getTouchPos, hexToRgb, updateImageData } from \"./tool\";\nclass Eraser extends Tool {\n  protected lineWidthBase = 1;\n  private mouseDown = false;\n  private color = \"\";\n  private saveImageData?: ImageData;\n  private previousPos: Point = {\n    x: 0,\n    y: 0\n  };\n  public constructor(lineSize = 1) {\n    super();\n    this.lineWidthBase = lineSize;\n    this.color = \"\";\n  }\n  private operateStart(pos: Point) {\n    if (!Tool.ctx) return;\n    this.saveImageData = Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height);\n    this.mouseDown = true;\n    this.color = getPixelColorOnCanvas(Tool.ctx, pos.x - this.lineWidthBase, pos.y - this.lineWidthBase);\n    Tool.ctx.lineWidth = 3 * this.lineWidthBase;\n    Tool.ctx.strokeStyle = this.color;\n    Tool.ctx.lineJoin = \"round\";\n    Tool.ctx.lineCap = \"round\";\n    Tool.ctx.beginPath();\n    this.previousPos = pos;\n  }\n  private operateMove(pos: Point) {\n    if (this.mouseDown) {\n      Tool.ctx.moveTo(this.previousPos.x, this.previousPos.y);\n      const c = 0.5 * (this.previousPos.x + pos.x);\n      const d = 0.5 * (this.previousPos.y + pos.y);\n      Tool.ctx.quadraticCurveTo(c, d, pos.x, pos.y);\n      Tool.ctx.stroke();\n      this.previousPos = pos;\n    }\n  }\n  private operateEnd() {\n    if (this.mouseDown) {\n      Tool.ctx.closePath();\n      this.mouseDown = false;\n      let imageData = Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height);\n      const colorRgb = hexToRgb(this.color);\n      if (colorRgb && this.saveImageData) {\n        imageData = updateImageData(this.saveImageData, imageData, [colorRgb.r, colorRgb.g, colorRgb.b, colorRgb.a]);\n\n        Tool.ctx.putImageData(imageData, 0, 0);\n      }\n    }\n  }\n  public onMouseDown(event: MouseEvent): void {\n    event.preventDefault();\n\n    const mousePos = getMousePos(Tool.ctx.canvas, event);\n\n    this.operateStart(mousePos);\n  }\n\n  public onMouseUp(event: MouseEvent): void {\n    event.preventDefault();\n    this.operateEnd();\n  }\n\n  public onMouseMove(event: MouseEvent): void {\n    event.preventDefault();\n    const mousePos = getMousePos(Tool.ctx.canvas, event);\n    this.operateMove(mousePos);\n  }\n\n  public onTouchStart(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    const touchPos = getTouchPos(event.target as HTMLCanvasElement, event);\n    this.operateStart(touchPos);\n  }\n\n  public onTouchMove(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    const touchPos = getTouchPos(event.target as HTMLCanvasElement, event);\n    this.operateMove(touchPos);\n  }\n\n  public onTouchEnd(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    this.operateEnd();\n  }\n}\n\nexport default Eraser;\n","/Users/ming/code-work/ccc-react-paint/src/util/tool/Text.ts",["126","127"],"/Users/ming/code-work/ccc-react-paint/src/util/tool/colorFill.ts",[],"/Users/ming/code-work/ccc-react-paint/src/components/edit/other/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/edit/other/Resize.tsx",["128"],"/Users/ming/code-work/ccc-react-paint/src/components/right/index.tsx",["129"],"import React, { useEffect } from \"react\";\nimport \"./index.less\";\nimport { ToolType } from \"../../util/toolType\";\nimport { FC } from \"react\";\nimport ShowPen from \"./pen\";\nimport ShowShape from \"./showShape\";\nimport FormatColor from \"./formatColor\";\nimport Text from \"./text\";\ninterface ToolbarProps {\n  toolType: ToolType;\n}\n\nconst ToolRightBar: FC<ToolbarProps> = (props) => {\n  const { toolType } = props;\n\n  const renderChild = (): any => {\n    let content = null;\n    switch (toolType) {\n      case ToolType.PEN:\n        content = <ShowPen />;\n        break;\n      case ToolType.SHAPE:\n        content = <ShowShape />;\n        break;\n      case ToolType.ERASER:\n        // setTool(new Eraser());\n        break;\n      case ToolType.TEXT:\n        content = <Text />;\n        break;\n      case ToolType.COLOR_FILL:\n        content = <FormatColor />;\n        break;\n      default:\n        break;\n    }\n    return content;\n  };\n\n  return <div className=\"ccc-showTool\">{renderChild()}</div>;\n};\n\nexport default React.memo(ToolRightBar, (preProps: ToolbarProps, nextProps: ToolbarProps) => {\n  return nextProps.toolType === ToolType.ERASER;\n});\n","/Users/ming/code-work/ccc-react-paint/src/components/tool/index.tsx",["130"],"/Users/ming/code-work/ccc-react-paint/src/components/right/pen/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/formatColor/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/showShape/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/text/index.tsx",["131"],"import React from \"react\";\nimport { useContext } from \"react\";\nimport { TextContext, ColorContext } from \"@/context\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport \"./index.less\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Select } from \"antd\";\nimport IntegerStep from \"../components/slider\";\nimport { useMemo } from \"react\";\n\nconst { Option } = Select;\n\ninterface FormatColor {\n  className?: string;\n}\n\nconst textFamily = [\n  \"Barlow-ExtraBold\",\n  \"DIN-AlternateBold\",\n  \"Trebuchet-MSBold\",\n  \"Trebuchet-MS\",\n  \"Poppins-Bold\",\n  \"Poppins-Light\",\n  \"Poppins-Medium\",\n  \"Poppins-Regular\",\n  \"Poppins-SemiBold\"\n];\n\nconst FormatColor: React.FC<FormatColor> = (props) => {\n  const { className } = props;\n  const [pickerColor, setPickerColor] = useState(createColor(\"#000000FF\"));\n  const TextToolContext = useContext(TextContext);\n  const colorContext = useContext(ColorContext);\n\n  const fontStyle = useMemo(() => {\n    return TextToolContext.fontStyle;\n  }, [TextToolContext.fontStyle]);\n\n  const activeColorType = colorContext.activeColor;\n\n  useEffect(() => {\n    colorContext.setColor(`#${pickerColor.hex}`);\n  }, [pickerColor]);\n\n  return (\n    <div className={className ? ` ccc-text formatColor ${className}` : \"ccc-text colorpanel\"}>\n      <div className=\"content\">\n        <div className=\"font\">\n          <h3>Font</h3>\n          <Select\n            className=\"ccc-text-family\"\n            onChange={(value: string) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontFamily: value\n              });\n            }}\n          >\n            {textFamily.map((va) => {\n              return (\n                <Option key={va} value={va}>\n                  {va}\n                </Option>\n              );\n            })}\n          </Select>\n        </div>\n        <div className=\"font\">\n          <h3>Letter Spacing</h3>\n          <IntegerStep\n            min={1}\n            max={8}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                letterSpacing: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>Font Size</h3>\n          <IntegerStep\n            min={12}\n            max={72}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontSize: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>FLine Height</h3>\n          <IntegerStep\n            min={24}\n            max={56}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                lineHeight: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <h3>color</h3>\n        <div className=\"material-color-box\">\n          <ColorBox\n            value={pickerColor}\n            disableAlpha={false}\n            onChange={(color) => {\n              setPickerColor(color);\n              TextToolContext.setFont({\n                ...fontStyle,\n                color: \"#\" + color.hex\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormatColor;\n","/Users/ming/code-work/ccc-react-paint/src/components/right/components/colorPanel/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/components/slider/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/right/components/shape/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/components/canvas/utils.tsx",[],[],{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":20},{"ruleId":"132","severity":1,"message":"136","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":19},{"ruleId":"132","severity":1,"message":"137","line":30,"column":19,"nodeType":"134","messageId":"135","endLine":30,"endColumn":28},{"ruleId":"132","severity":1,"message":"138","line":30,"column":30,"nodeType":"134","messageId":"135","endLine":30,"endColumn":39},{"ruleId":"132","severity":1,"message":"139","line":25,"column":9,"nodeType":"134","messageId":"135","endLine":25,"endColumn":20},{"ruleId":"132","severity":1,"message":"140","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"132","severity":1,"message":"141","line":10,"column":8,"nodeType":"134","messageId":"135","endLine":10,"endColumn":20},{"ruleId":"132","severity":1,"message":"142","line":40,"column":9,"nodeType":"134","messageId":"135","endLine":40,"endColumn":24},"@typescript-eslint/no-unused-vars","'Ref' is defined but never used.","Identifier","unusedVar","'ColorType' is defined but never used.","'x' is defined but never used.","'y' is defined but never used.","'handleClick' is assigned a value but never used.","'useEffect' is defined but never used.","'ColorFillTwo' is defined but never used.","'activeColorType' is assigned a value but never used."]