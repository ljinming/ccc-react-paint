[{"/Users/jinmingliu/work/ccc-react-paint/src/index.tsx":"1","/Users/jinmingliu/work/ccc-react-paint/src/CCCPaint.tsx":"2","/Users/jinmingliu/work/ccc-react-paint/src/util/toolType.ts":"3","/Users/jinmingliu/work/ccc-react-paint/src/context/index.ts":"4","/Users/jinmingliu/work/ccc-react-paint/src/util/dispatcher/index.ts":"5","/Users/jinmingliu/work/ccc-react-paint/src/canvas/index.tsx":"6","/Users/jinmingliu/work/ccc-react-paint/src/left-tool/index.tsx":"7","/Users/jinmingliu/work/ccc-react-paint/src/right/index.tsx":"8","/Users/jinmingliu/work/ccc-react-paint/src/edit/index.tsx":"9","/Users/jinmingliu/work/ccc-react-paint/src/util/dispatcher/event.ts":"10","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/shape.ts":"11","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/tool.ts":"12","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/index.ts":"13","/Users/jinmingliu/work/ccc-react-paint/src/util/snapshot/index.ts":"14","/Users/jinmingliu/work/ccc-react-paint/src/right/showShape/index.tsx":"15","/Users/jinmingliu/work/ccc-react-paint/src/right/pen/index.tsx":"16","/Users/jinmingliu/work/ccc-react-paint/src/right/formatColor/index.tsx":"17","/Users/jinmingliu/work/ccc-react-paint/src/right/earser/index.tsx":"18","/Users/jinmingliu/work/ccc-react-paint/src/right/text/index.tsx":"19","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/pen.ts":"20","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/eraser.ts":"21","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/colorFill.ts":"22","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/colorExtract.ts":"23","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/Text.ts":"24","/Users/jinmingliu/work/ccc-react-paint/src/right/components/colorPanel/index.tsx":"25","/Users/jinmingliu/work/ccc-react-paint/src/right/components/shape/index.tsx":"26","/Users/jinmingliu/work/ccc-react-paint/src/right/components/slider/index.tsx":"27","/Users/jinmingliu/work/ccc-react-paint/src/utils.tsx":"28","/Users/jinmingliu/work/ccc-react-paint/src/ToolTypeIcon.tsx":"29","/Users/jinmingliu/work/ccc-react-paint/src/canvas/utils.tsx":"30","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/colorChange.ts":"31","/Users/jinmingliu/work/ccc-react-paint/src/components/loading/index.tsx":"32"},{"size":161,"mtime":1655091758625,"results":"33","hashOfConfig":"34"},{"size":7351,"mtime":1656320831164,"results":"35","hashOfConfig":"34"},{"size":918,"mtime":1655088099573,"results":"36","hashOfConfig":"34"},{"size":1493,"mtime":1656289418959,"results":"37","hashOfConfig":"34"},{"size":2010,"mtime":1654736372870,"results":"38","hashOfConfig":"34"},{"size":15526,"mtime":1656320691209,"results":"39","hashOfConfig":"34"},{"size":3164,"mtime":1655876054879,"results":"40","hashOfConfig":"34"},{"size":1242,"mtime":1656072676341,"results":"41","hashOfConfig":"34"},{"size":1629,"mtime":1655876132946,"results":"42","hashOfConfig":"34"},{"size":136,"mtime":1655087991761,"results":"43","hashOfConfig":"34"},{"size":8279,"mtime":1656154083776,"results":"44","hashOfConfig":"34"},{"size":3957,"mtime":1656154083777,"results":"45","hashOfConfig":"34"},{"size":247,"mtime":1654748643953,"results":"46","hashOfConfig":"34"},{"size":988,"mtime":1656155563271,"results":"47","hashOfConfig":"34"},{"size":512,"mtime":1655358397568,"results":"48","hashOfConfig":"34"},{"size":875,"mtime":1656152966958,"results":"49","hashOfConfig":"34"},{"size":1078,"mtime":1655885648435,"results":"50","hashOfConfig":"34"},{"size":730,"mtime":1656152961312,"results":"51","hashOfConfig":"34"},{"size":3402,"mtime":1656289418960,"results":"52","hashOfConfig":"34"},{"size":2984,"mtime":1656158308397,"results":"53","hashOfConfig":"34"},{"size":2905,"mtime":1656136297689,"results":"54","hashOfConfig":"34"},{"size":5848,"mtime":1656383399743,"results":"55","hashOfConfig":"34"},{"size":1045,"mtime":1656123785649,"results":"56","hashOfConfig":"34"},{"size":3015,"mtime":1656289418961,"results":"57","hashOfConfig":"34"},{"size":2662,"mtime":1656150136379,"results":"58","hashOfConfig":"34"},{"size":3780,"mtime":1655358336768,"results":"59","hashOfConfig":"34"},{"size":837,"mtime":1655274671520,"results":"60","hashOfConfig":"34"},{"size":2069,"mtime":1656289418964,"results":"61","hashOfConfig":"34"},{"size":13540,"mtime":1655877638790,"results":"62","hashOfConfig":"34"},{"size":2019,"mtime":1656158336681,"results":"63","hashOfConfig":"64"},{"size":3823,"mtime":1656135408336,"results":"65","hashOfConfig":"34"},{"size":363,"mtime":1656321853937,"results":"66","hashOfConfig":"34"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"bh4dz0",{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"69"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"69"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"69"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"69"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"69"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"69"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"69"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"69"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12q7nhl",{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"/Users/jinmingliu/work/ccc-react-paint/src/index.tsx",[],[],"/Users/jinmingliu/work/ccc-react-paint/src/CCCPaint.tsx",["141"],"import React, { Ref, useEffect, useImperativeHandle } from \"react\";\nimport Canvas from \"./canvas\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { Tool } from \"./util/tool\";\nimport {\n  ToolTypeContext,\n  ShapeTypeContext,\n  ShapeOutlineContext,\n  LineWidthContext,\n  ColorContext,\n  FillContext,\n  TextContext,\n  DispatcherContext,\n} from \"./context\";\nimport \"./style.less\";\nimport { useState } from \"react\";\nimport {\n  ColorType,\n  LineWidthType,\n  ShapeOutlineType,\n  ShapeToolType,\n  ToolType,\n} from \"./util/toolType\";\nimport ToolPanel from \"./left-tool\";\nimport Dispatcher from \"./util/dispatcher\";\nimport Right from \"./right\";\nimport Edit from \"./edit\";\nimport { getImageSize } from \"./utils\";\nimport Loading from \"./components/loading\";\n\ninterface PaintProps {\n  imgSrc?: string;\n  width?: number;\n  height?: number;\n  background?: string;\n  id?: string;\n  cRef?: any;\n  ThumbSrc?: string;\n  showArea?: Array<[number, number]>;\n}\n//= https://bafybeih7buvkqebcu3olxinxsjh7iqqtlw2xoapp63dwqw5bj43ytxtcia.ipfs.dweb.link/orign.png\"\n//\"https://bafybeicgvg3vwtv5c633cjexbykjp75yjt755qhma4o7vgusa4ldvocz44.ipfs.dweb.link/orign.png\"\n\nfunction Paint(props: PaintProps): JSX.Element {\n  const {\n    id = \"test\",\n    imgSrc = \"https://bafybeih7buvkqebcu3olxinxsjh7iqqtlw2xoapp63dwqw5bj43ytxtcia.ipfs.dweb.link/orign.png\",\n    width = 0,\n    height = 0,\n    background,\n    cRef,\n    showArea,\n    ThumbSrc,\n  } = props;\n\n  const [toolType, setToolType] = useState<ToolType>(ToolType.PEN);\n  const [strawType, setStrawType] = useState<boolean>(false);\n  const [shapeType, setShapeType] = useState<ShapeToolType>(ShapeToolType.LINE);\n  const [size, setSize] = useState({ width, height });\n  const [Thumbnail, setThumbnail] = useState(ThumbSrc);\n  const [loadings, setLoadings] = useState(true);\n\n  const [shapeOutlineType, setShapeOutlineType] = useState<ShapeOutlineType>(\n    ShapeOutlineType.SOLID\n  );\n  const [lineWidthType, setLineWidthType] = useState<LineWidthType>(\n    LineWidthType.LINESIZE\n  );\n  const [lineSize, setLineFontSize] = useState<number>(20);\n  const [fillColor, setFillColor] = useState<string>(\"\");\n  const [activeColorType, setActiveColorType] = useState<ColorType>(\n    ColorType.MAIN\n  );\n  const [fontStyle, setFontStyle] = useState({\n    fontSize: 72,\n    fontFamily: \"System Font\",\n  });\n  const [mainColor, setMainColor] = useState<string>(\"black\");\n  const [subColor, setSubColor] = useState<string>(\"white\");\n  const [dispatcher] = useState(new Dispatcher());\n\n  const setColor = (value: string) => {\n    if (activeColorType === ColorType.MAIN) {\n      setMainColor(value);\n    } else {\n      setSubColor(value);\n    }\n  };\n\n  useImperativeHandle(cRef, () => ({\n    getCurrentImageData: () => {\n      const canvasElem: any = document.getElementById(`ccc-paint-canvas ${id}`);\n      const imageData = canvasElem.toDataURL(\"image/png\");\n      return imageData;\n    },\n  }));\n\n  const loadImage = async (imgSrc: string) => {\n    const size = await getImageSize(imgSrc);\n    setSize(size);\n    setLoadings(false);\n  };\n\n  useEffect(() => {\n    // 再一次进入\n    if (imgSrc) {\n      loadImage(imgSrc);\n    } else if (width && height) {\n      setSize({ width, height });\n      setLoadings(false);\n    }\n    if (!ThumbSrc) {\n      // 没有area\n      setThumbnail(\"\");\n      Tool.showArea = null;\n    }\n  }, [width, imgSrc, height]);\n\n  if (showArea) {\n    Tool.showArea = showArea;\n  }\n\n  return (\n    <ToolTypeContext.Provider\n      value={{\n        type: toolType,\n        strawType: strawType,\n        setStrawType: (value) => {\n          setStrawType(value);\n        },\n        setType: (value) => {\n          setToolType(value);\n          setLineFontSize(20);\n        },\n      }}\n    >\n      <ShapeTypeContext.Provider\n        value={{\n          type: shapeType,\n          setType: (type: ShapeToolType) => {\n            setShapeType(type);\n          },\n        }}\n      >\n        <ShapeOutlineContext.Provider\n          value={{ type: shapeOutlineType, setType: setShapeOutlineType }}\n        >\n          <LineWidthContext.Provider\n            value={{\n              type: lineWidthType,\n              lineSize: lineSize,\n              setType: setLineWidthType,\n              setLineSize: setLineFontSize,\n            }}\n          >\n            <DispatcherContext.Provider value={{ dispatcher }}>\n              <ColorContext.Provider\n                value={{\n                  mainColor,\n                  subColor,\n                  activeColor: activeColorType,\n                  setColor,\n                  setActiveColor: setActiveColorType,\n                }}\n              >\n                <FillContext.Provider\n                  value={{\n                    fillColor,\n                    setFillColor,\n                  }}\n                >\n                  <TextContext.Provider\n                    value={{\n                      fontStyle,\n                      setFont: setFontStyle,\n                    }}\n                  >\n                    <div className=\"ccc\">\n                      <div className=\"ccc-edit\">\n                        <Edit />\n                      </div>\n                      <Loading />\n                      <div className=\"ccc-content\">\n                        <div className=\"ToolPanel\">\n                          <ToolPanel\n                            className=\"toolbar-item\"\n                            fillColor={fillColor}\n                          />\n                        </div>\n                        {loadings ? (\n                          <div className=\"show-loading\">\n                            <LoadingOutlined className=\"loading-size\" />\n                          </div>\n                        ) : (\n                          <div className=\"show-Canvas\">\n                            <Canvas\n                              id={id}\n                              strawType={strawType}\n                              CanvasSize={size}\n                              imgSrc={imgSrc}\n                              background={background}\n                              fillColor={fillColor}\n                              toolType={toolType}\n                              fontStyle={fontStyle}\n                              shapeType={shapeType}\n                              shapeOutlineType={shapeOutlineType}\n                              mainColor={mainColor}\n                              subColor={subColor}\n                              lineSize={lineSize}\n                              lineWidthType={lineWidthType}\n                              setColor={setColor}\n                            />\n                          </div>\n                        )}\n                        <div className=\"show-type\">\n                          <Right\n                            toolType={toolType}\n                            ThumbSrc={Thumbnail}\n                            lineSize={lineSize}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </TextContext.Provider>\n                </FillContext.Provider>\n              </ColorContext.Provider>\n            </DispatcherContext.Provider>\n          </LineWidthContext.Provider>\n        </ShapeOutlineContext.Provider>\n      </ShapeTypeContext.Provider>\n    </ToolTypeContext.Provider>\n  );\n}\n\nexport default Paint;\n","/Users/jinmingliu/work/ccc-react-paint/src/util/toolType.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/context/index.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/util/dispatcher/index.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/canvas/index.tsx",["142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158"],"import React, { useMemo } from \"react\";\nimport \"./index.less\";\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport {\n  LineWidthType,\n  ShapeOutlineType,\n  ShapeToolType,\n  ToolType,\n} from \"../util/toolType\";\nimport { FC } from \"react\";\nimport { useState } from \"react\";\nimport { Pen, Tool, Eraser, ColorFill, Text } from \"../util/tool\";\nimport Shape from \"../util/tool/shape\";\nimport { useContext } from \"react\";\nimport { DispatcherContext } from \"../context\";\nimport { CLEAR_EVENT, REDO_EVENT, UNDO_EVENT } from \"../util/dispatcher/event\";\nimport SnapShot from \"../util/snapshot\";\nimport cursorPen from \"@/assets/icon/cursorPen.jpg\";\nimport cursorErase from \"@/assets/icon/cursorErase.jpg\";\nimport straw from \"@/assets/icon/straw.jpg\";\nimport bucket from \"@/assets/icon/bucket.jpg\";\ninterface CanvasProps {\n  toolType: ToolType;\n  shapeType: ShapeToolType;\n  shapeOutlineType: ShapeOutlineType;\n  lineWidthType: LineWidthType;\n  strawType: boolean;\n  mainColor: string;\n  subColor: string;\n  lineSize?: number;\n  fillColor: string;\n  fontStyle: any;\n  imgSrc?: string;\n  CanvasSize?: {\n    width: number;\n    height: number;\n  };\n  id: string;\n  background?: string;\n  onSize?: (value: any) => void;\n  setColor: (value: string) => void;\n}\n\nlet show_scale = 1;\n\nlet translatex = 0;\nlet translatey = 0;\n\nconst maxScale = 6;\nconst minScale = 0.1;\nconst scaleStep = 0.1;\n\nconst Canvas: FC<CanvasProps> = (props) => {\n  const {\n    id,\n    toolType,\n    lineWidthType,\n    mainColor,\n    subColor,\n    setColor,\n    CanvasSize,\n    fillColor,\n    shapeType,\n    shapeOutlineType,\n    fontStyle,\n    imgSrc,\n    background,\n    strawType,\n    lineSize = 1,\n  } = props;\n  const [tool, setTool] = useState<Tool>();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const allCanvasRef = useRef<HTMLDivElement>(null);\n  const canvasTextRef = useRef<HTMLDivElement>(null);\n  const textBoxRef = useRef<HTMLTextAreaElement>(null);\n  const dispatcherContext = useContext(DispatcherContext);\n  const [snapshot] = useState<SnapShot>(new SnapShot());\n\n  useEffect(() => {\n    showCanvasCursor();\n    switch (toolType) {\n      case ToolType.PEN:\n        setTool(new Pen());\n        break;\n      case ToolType.ERASER:\n        setTool(new Eraser(lineSize));\n        break;\n      // case ToolType.COLOR_EXTRACT:\n      //   setTool(new ColorExtract(setColor));\n      //   break;\n      case ToolType.COLOR_FILL:\n        setTool(new ColorFill());\n        break;\n      case ToolType.TEXT:\n        setTool(new Text(fontStyle));\n        break;\n      case ToolType.SHAPE:\n        setTool(\n          new Shape(shapeType, shapeOutlineType === ShapeOutlineType.DOTTED)\n        );\n        break;\n      default:\n        break;\n    }\n  }, [toolType, shapeType, fontStyle, lineSize]);\n\n  useEffect(() => {\n    if (tool instanceof Shape) {\n      tool.isDashed = shapeOutlineType === ShapeOutlineType.DOTTED;\n    }\n  }, [shapeOutlineType]);\n\n  useEffect(() => {\n    switch (lineWidthType) {\n      case LineWidthType.THIN:\n        Tool.lineWidthFactor = 1;\n        break;\n      case LineWidthType.MIDDLE:\n        Tool.lineWidthFactor = 2;\n        break;\n      case LineWidthType.BOLD:\n        Tool.lineWidthFactor = 3;\n        break;\n      case LineWidthType.MAXBOLD:\n        Tool.lineWidthFactor = 4;\n        break;\n      case LineWidthType.LINESIZE:\n        Tool.lineWidthFactor = lineSize;\n        break;\n      default:\n        break;\n    }\n  }, [lineWidthType, lineSize]);\n\n  useEffect(() => {\n    Tool.mainColor = mainColor;\n  }, [mainColor]);\n\n  useEffect(() => {\n    Tool.fillColor = fillColor;\n  }, [fillColor]);\n\n  useEffect(() => {\n    Tool.subColor = subColor;\n  }, [subColor]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      showCanvasCursor();\n      drawCanvas();\n      Tool.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n      // 注册清空画布事件\n      const dispatcher = dispatcherContext.dispatcher;\n      const callback = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          if (imgSrc) {\n            const img = new Image();\n            img.crossOrigin = \"anonymous\";\n            img.src = imgSrc;\n            img.onload = function () {\n              const { width, height } = img;\n              /*1.在canvas 中绘制图像*/\n              ctx.drawImage(img, 0, 0);\n              /*2.从canvas 中获取图像的ImageData*/\n              const imgData = ctx.getImageData(0, 0, width, height);\n              /*3.在canvas 中显示ImageData*/\n              ctx.putImageData(\n                imgData,\n                //位置\n                0,\n                height\n              );\n              snapshot.add(imgData);\n            };\n          } else {\n            ctx.fillStyle = \"#2d2d2d\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n          }\n        }\n      };\n      dispatcher.on(CLEAR_EVENT, callback);\n\n      // 注册画布前进事件\n      const forward = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          const imageData = snapshot.forward();\n          if (imageData) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n        }\n      };\n      dispatcher.on(REDO_EVENT, forward);\n\n      // 注册画布后退事件\n      const back = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          const imageData = snapshot.back();\n          if (imageData) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n        }\n      };\n      dispatcher.on(UNDO_EVENT, back);\n\n      return () => {\n        dispatcher.off(CLEAR_EVENT, callback);\n      };\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    showCanvasCursor();\n  }, [strawType]);\n\n  //鼠标icon\n  const showCanvasCursor = () => {\n    const canvas = canvasRef.current;\n    const textBox = textBoxRef.current;\n    if (canvas) {\n      if (strawType) {\n        //吸色\n        return (canvas.style.cursor = `url(${straw}) 12 16,auto`);\n      }\n      if (toolType === 0) {\n        canvas.style.cursor = `url(${cursorPen}) 12 16,auto`;\n      } else if (toolType === 4) {\n        canvas.style.cursor = `url(${cursorErase}) 12 16,auto`;\n      } else if (toolType === 1) {\n        canvas.style.cursor = `url(${bucket}) 12 16,auto`;\n      } else {\n        canvas.style.cursor = `auto`;\n      }\n      if (toolType !== 2) {\n        textBox!.setAttribute(\"style\", `z-index:-1;display:none`);\n      }\n    }\n  };\n\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    const container = allCanvasRef!.current;\n    const textRef = canvasTextRef.current;\n    if (canvas && container && textRef) {\n      const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n      if (imgSrc) {\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";\n        img.src = imgSrc;\n        img.onload = function () {\n          canvas.height = img.height;\n          canvas.width = img.width;\n          /*1.在canvas 中绘制图像*/\n          // ctx.scale(showScale, showScale);\n          textRef.setAttribute(\n            \"style\",\n            `width:${canvas.width};height:${canvas.height}`\n          );\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          snapshot.add(ctx.getImageData(0, 0, canvas.width, canvas.height));\n        };\n      } else if (CanvasSize) {\n        canvas.height = CanvasSize.height;\n        canvas.width = CanvasSize.width;\n        ctx.fillStyle = background || \"#2d2d2d\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        snapshot.add(ctx.getImageData(0, 0, canvas.width, canvas.height));\n      }\n    }\n  };\n\n  useEffect(() => {\n    const container = allCanvasRef!.current;\n    const canvas = canvasRef.current;\n\n    if (CanvasSize && container && canvas) {\n      if (Tool.ctx) {\n        Tool.ctx.clearRect(0, 0, canvas.width, canvas?.height);\n      }\n      drawCanvas();\n      const height = container!.clientHeight;\n      const width = container!.clientWidth;\n      const showScale =\n        Math.min(width, height) /\n          Math.max(CanvasSize.height, CanvasSize.width) || 1;\n      show_scale = showScale; //getScale({ width, height }, CanvasSize);\n      Tool.currentScale = show_scale;\n      translatex = (width - CanvasSize.width * show_scale) / 2;\n      translatey = (height - CanvasSize.height * show_scale) / 2;\n      canvas.style.transform = `scale(${show_scale}) translate(${translatex}px,${translatey}px)`;\n    }\n  }, [CanvasSize]);\n\n  const onMouseDown = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseDown(event);\n    }\n  };\n\n  const onMouseUp = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseUp(event);\n      // 存储canvas剪影\n      snapshot.add(\n        Tool.ctx.getImageData(\n          0,\n          0,\n          Tool.ctx.canvas.width,\n          Tool.ctx.canvas.height\n        )\n      );\n    }\n  };\n\n  const onTouchStart = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchStart(event);\n    }\n  };\n\n  const onTouchMove = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchMove(event);\n    }\n  };\n\n  const onTouchEnd = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchEnd(event);\n    }\n    // 存储canvas剪影\n    snapshot.add(\n      Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height)\n    );\n  };\n\n  const getTrans = (\n    client: number,\n    newScale: number,\n    direction: string,\n    img: any,\n    boxdom: any,\n    scale: number\n  ) => {\n    const lastTrans = direction === \"width\" ? translatex : translatey;\n    // console.log(\"已经偏移的距离:\", lastTrans);\n\n    const sizeChanage = img[direction] * newScale - img[direction] * scale;\n    // console.log(`img ${direction}放大了:`, sizeChanage);\n\n    // 整体已经移动过了，需要弥补回来\n    const pre = client - lastTrans - boxdom[direction === \"width\" ? \"x\" : \"y\"];\n\n    //console.log(\"缩放中心到边界的距离\", pre);\n\n    const percent = pre / (img[direction] * scale);\n\n    //  console.log(\"当前缩放尺度下，缩放中心到边界比例\", percent);\n\n    const trans = percent * sizeChanage;\n    // console.log(\"缩放中心移动的距离:\", trans);\n    return trans;\n  };\n\n  const onMousewheel = (event: WheelEvent) => {\n    event.preventDefault();\n    const canvas = canvasRef.current;\n    const container = allCanvasRef!.current;\n    const { clientX, clientY, deltaX, deltaY, ctrlKey } = event;\n    const { width, height, x, y } = container!.getBoundingClientRect();\n    const { width: canvasWidth, height: canvasHeight } =\n      container!.getBoundingClientRect();\n    let newScale;\n    if (ctrlKey) {\n      //双指放大缩小\n      if (deltaY < 0) {\n        newScale = show_scale + scaleStep;\n        newScale = Math.min(newScale, maxScale);\n      } else {\n        newScale = show_scale - scaleStep;\n        newScale = Math.max(newScale, minScale);\n      }\n      const transX = getTrans(\n        clientX,\n        newScale,\n        \"width\",\n        CanvasSize,\n        {\n          width,\n          height,\n          x,\n          y,\n        },\n        show_scale\n      );\n      const transY = getTrans(\n        clientY,\n        newScale,\n        \"height\",\n        CanvasSize,\n        {\n          width,\n          height,\n          x,\n          y,\n        },\n        show_scale\n      );\n      translatex = translatex - transX;\n      translatey = translatey - transY;\n      show_scale = newScale;\n      Tool.currentScale = newScale;\n      canvas!.style.transform = `translate3d(${translatex}px, ${translatey}px, 0px) scale(${show_scale})`;\n    }\n    // else {\n    //   if (!!deltaX && !deltaY) {\n    //     // if (translatex > 0 && translatex < width) {\n    //     // 左右移动 向右 -deltaX < 0  向左   >0\n    //     translatex = Number((translatex - deltaX).toFixed(3));\n    //     // }\n    //   } else if (!!deltaY && !deltaX) {\n    //     // if (translatey > 0 && translatex < height) {\n    //     // 左右移动 向右 -deltaX < 0  向左   >0\n    //     translatey = Number((translatey - deltaY).toFixed(3));\n    //     // }\n    //   }\n    // }\n  };\n\n  const onCanvasBoxWheel = (event: WheelEvent) => {\n    const { clientX, clientY, deltaX, deltaY, ctrlKey } = event;\n    event.preventDefault();\n    const canvas = canvasRef.current;\n    if (!ctrlKey) {\n      if (!!deltaX && !deltaY) {\n        // if (translatex > 0 && translatex < width) {\n        // 左右移动 向右 -deltaX < 0  向左   >0\n        translatex = Number((translatex - deltaX).toFixed(3));\n        // }\n      } else if (!!deltaY && !deltaX) {\n        // if (translatey > 0 && translatex < height) {\n        // 左右移动 向右 -deltaX < 0  向左   >0\n        translatey = Number((translatey - deltaY).toFixed(3));\n        // }\n      }\n      canvas!.style.transform = `translate(${translatex}px, ${translatey}px) scale(${show_scale})`;\n    }\n  };\n\n  const onKeyDown = (e: KeyboardEvent) => {\n    if (tool) {\n      tool.onKeyDown(e);\n    }\n  };\n\n  const onMouseMove = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseMove(event);\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const textBox = textBoxRef.current;\n    const canvasBox = allCanvasRef.current;\n    if (canvas && textBox && canvasBox) {\n      canvas.addEventListener(\"mousedown\", onMouseDown);\n      canvas.addEventListener(\"mousemove\", onMouseMove);\n      canvas.addEventListener(\"mouseup\", onMouseUp);\n      canvas.addEventListener(\"wheel\", onMousewheel, { passive: false });\n      canvas.addEventListener(\"touchstart\", onTouchStart);\n      canvas.addEventListener(\"touchmove\", onTouchMove);\n      canvas.addEventListener(\"touchend\", onTouchEnd);\n      textBox.addEventListener(\"keydown\", onKeyDown);\n      canvasBox.addEventListener(\"wheel\", onCanvasBoxWheel, { passive: false });\n\n      return () => {\n        canvas.removeEventListener(\"mousedown\", onMouseDown);\n        canvas.removeEventListener(\"mousemove\", onMouseMove);\n        canvas.removeEventListener(\"mouseup\", onMouseUp);\n        canvas.removeEventListener(\"wheel\", onMousewheel);\n\n        canvas.removeEventListener(\"touchstart\", onTouchStart);\n        canvas.removeEventListener(\"touchmove\", onTouchMove);\n        canvas.removeEventListener(\"touchend\", onTouchEnd);\n        textBox.removeEventListener(\"keydown\", onKeyDown);\n\n        canvasBox.removeEventListener(\"wheel\", onCanvasBoxWheel);\n      };\n    }\n  }, [canvasRef, onMouseDown, onMouseMove, onMouseUp]);\n\n  const style = {\n    margin: \"auto\",\n  };\n  if (allCanvasRef && CanvasSize) {\n    const allCanvas = allCanvasRef.current;\n    if (allCanvas) {\n      style.margin =\n        allCanvas.offsetWidth < (CanvasSize?.width || 0) ? \"unset\" : \"auto\";\n    }\n  }\n  return (\n    <div className=\"all-canvas\" ref={allCanvasRef}>\n      <canvas\n        id={`ccc-paint-canvas ${id}`}\n        className=\"ccc-paint-canvas\"\n        ref={canvasRef}\n        style={{\n          background: background || \"#2d2d2d\",\n          ...style,\n        }}\n      ></canvas>\n      <div className=\"canvas-text\" id=\"text-container\" ref={canvasTextRef}>\n        <textarea\n          ref={textBoxRef}\n          id=\"textBox\"\n          name=\"story\"\n          autoFocus={true}\n          //autocomplete={fales}\n          //bordered={true}\n          // autoSize={{ minRows: 2, maxRows: 2 }}\n          className={`text-box`}\n          // rows={1}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Canvas;\n","/Users/jinmingliu/work/ccc-react-paint/src/left-tool/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/right/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/edit/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/util/dispatcher/event.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/util/tool/shape.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/util/tool/tool.ts",["159"],"/* eslint-disable @typescript-eslint/no-unused-vars */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n\n// 吸色功能\nexport const setStraw = (pos?: Point) => {\n  if (Tool.strawFlag && pos) {\n    // 吸色\n    const color = getPixelColorOnCanvas(Tool.ctx, pos.x, pos!.y);\n    Tool.strawColor = color;\n    Tool.strawFlag = false;\n  } \n \n};\n\n\nexport const getMousePos = (canvas: HTMLCanvasElement, event: MouseEvent, type?: string): Point => {\n  const rect = canvas.getBoundingClientRect();\n  const scale = Tool.currentScale || 1\n  return {\n    x: (event.clientX - rect.left)/scale,\n    y: (event.clientY - rect.top)/scale\n  };\n};\n\nexport const getTouchPos = (canvas: HTMLCanvasElement, event: TouchEvent): Point => {\n  return {\n    x: event.touches[0].pageX - canvas.offsetLeft,\n    y: event.touches[0].pageY - canvas.offsetTop\n  };\n};\n\nexport const rgbToHex = (r: number, g: number, b: number, a?: number) => {\n  const componentToHex = (c: number) => {\n    const hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  };\n\n  const res = \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n\n  return a ? res + componentToHex(a) : res;\n};\n\nexport const hexToRgb = (hex: string) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n        a: parseInt(result[4], 16)\n      }\n    : null;\n};\n\nexport const getPixelColorOnCanvas = (ctx: CanvasRenderingContext2D, x: number, y: number): string => {\n  const p = ctx.getImageData(x, y, 1, 1).data;\n  return rgbToHex(p[0], p[1], p[2], p[3]);\n};\n\nexport const updateImageData = (origin: ImageData, data: ImageData, fillData: [number, number, number, number]) => {\n  for (let row = 0; row < data.height; row++) {\n    for (let col = 0; col < data.width; col++) {\n      const index = row * data.width * 4 + col * 4;\n      const r1 = data.data[index];\n      const g1 = data.data[index + 1];\n      const b1 = data.data[index + 2];\n      const a1 = data.data[index + 3];\n\n      const r2 = origin.data[index];\n      const g2 = origin.data[index + 1];\n      const b2 = origin.data[index + 2];\n      const a2 = origin.data[index + 3];\n\n      const equalOrigin = r1 === r2 && g1 === g2 && b1 === b2 && a1 === a2;\n      const equalFilling = r1 === fillData[0] && g1 === fillData[1] && b1 === fillData[2] && a1 === fillData[3];\n      if (!(equalOrigin || equalFilling)) {\n        data.data[index] = fillData[0];\n        data.data[index + 1] = fillData[1];\n        data.data[index + 2] = fillData[2];\n        data.data[index + 3] = fillData[3];\n      }\n    }\n  }\n\n  return data;\n};\n\nexport const clacArea = (points: Point) => {\n  return Tool.showArea ? Tool.showArea.find(item => item[0] === points.x && item[1] === points.y):true\n}\n\nexport default class Tool {\n  /**\n   * 线宽\n   */\n  public static lineWidthFactor = 1;\n  /**\n   * 主色\n   */\n  public static fillColormainColor = \"black\";\n  /**\n   * 副色\n   */\n  public static subColor = \"white\";\n\n  // 吸色\n  public static strawColor ='';\n\n  // 背景色\n  public static fillColor = \"#2d2d2d\";\n\n\n\n  public static zoom = {\n    scaleX:1,\n    scaleY:1\n  }\n  public currentScale = 1\n\n  public strawFlag = false\n\n  public static ctx: CanvasRenderingContext2D;\n  //可画区域\n  public static showArea: Array<[number, number]> | null;\n  static currentScale: number;\n  static show_offset: any;\n  static strawFlag: boolean;\n  static mainColor: string;\n\n  public onMouseDown(event: MouseEvent): void {\n    //\n  }\n\n  public onMouseMove(event: MouseEvent): void {\n    //\n  }\n\n  public onMouseUp(event: MouseEvent): void {\n    //\n  }\n\n  public onTouchStart(event: TouchEvent): void {\n    //\n  }\n\n  public onTouchMove(event: TouchEvent): void {\n    //\n  }\n\n  public onTouchEnd(event: TouchEvent): void {\n    //\n  }\n\n  public onKeyDown(event: KeyboardEvent): void { \n    //\n  }\n \n}\n","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/index.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/util/snapshot/index.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/right/showShape/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/right/pen/index.tsx",["160","161"],"import React, { FC } from \"react\";\nimport { useContext } from \"react\";\nimport { LineWidthContext } from \"@/context\";\nimport IntegerStep from \"../components/slider\";\nimport ColorPanel from \"../components/colorPanel\";\nimport \"./index.less\";\nimport { Tool } from \"../../util/tool\";\n\ninterface PenType {\n  lineSize: number;\n}\n\nconst ShowPen = (props: PenType) => {\n  const lineWidthContext = useContext(LineWidthContext);\n\n  const { lineSize } = props;\n\n  return (\n    <div className=\"ccc-pen\">\n      <div className=\"ccc-slider-item\">\n        <h3>Brush Thickness</h3>\n        <IntegerStep\n          min={1}\n          max={200}\n          value={lineSize}\n          onPropsChange={(value) => {\n            lineWidthContext.setLineSize(value);\n          }}\n        />\n      </div>\n      <ColorPanel type=\"pen\" className=\"toolbar-item\" />\n    </div>\n  );\n};\n\nexport default ShowPen;\n","/Users/jinmingliu/work/ccc-react-paint/src/right/formatColor/index.tsx",["162","163"],"import React from \"react\";\nimport { useContext } from \"react\";\nimport { FillContext } from \"@/context\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport \"./index.less\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport ColorPanel from \"../components/colorPanel\";\ninterface FormatColor {\n  className?: string;\n}\n\nconst FormatColor: React.FC<FormatColor> = (props) => {\n  const { className } = props;\n  const [pickerColor, setPickerColor] = useState(createColor(\"#000000FF\"));\n  const FillColorContext = useContext(FillContext);\n  //   const activeColorType = colorContext.activeColor;\n\n  useEffect(() => {\n    FillColorContext.setFillColor(`#${pickerColor.hex}`);\n  }, [pickerColor]);\n\n  return (\n    <div className={className ? `formatColor ${className}` : \"colorpanel\"}>\n      <div className=\"content\">\n        <ColorPanel\n          className=\"toolbar-item\"\n          onChange={(color: string) => {\n            FillColorContext.setFillColor(color);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default FormatColor;\n","/Users/jinmingliu/work/ccc-react-paint/src/right/earser/index.tsx",["164"],"import React, { FC } from \"react\";\nimport { useContext } from \"react\";\nimport { LineWidthContext } from \"@/context\";\nimport IntegerStep from \"../components/slider\";\nimport \"./index.less\";\n\ninterface earserType {\n  lineSize: number;\n}\n\nconst Eraser = (props: earserType) => {\n  const { lineSize } = props;\n  const lineWidthContext = useContext(LineWidthContext);\n  return (\n    <div className=\"ccc-pen\">\n      <div className=\"ccc-slider-item\">\n        <h3>Eraser Thickness</h3>\n        <IntegerStep\n          min={1}\n          max={200}\n          value={lineSize}\n          onPropsChange={(value) => {\n            lineWidthContext.setLineSize(value);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Eraser;\n","/Users/jinmingliu/work/ccc-react-paint/src/right/text/index.tsx",["165","166","167"],"import React from \"react\";\nimport { useContext } from \"react\";\nimport { TextContext, ColorContext } from \"@/context\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport \"./index.less\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Select } from \"antd\";\nimport IntegerStep from \"../components/slider\";\nimport ColorPanel from \"../components/colorPanel\";\nimport { useMemo } from \"react\";\n\nconst { Option } = Select;\n\ninterface FormatColor {\n  className?: string;\n}\n\nconst textFamily = [\n  \"Barlow-ExtraBold\",\n  \"DIN-AlternateBold\",\n  \"Trebuchet-MSBold\",\n  \"Trebuchet-MS\",\n  \"Poppins-Bold\",\n  \"Poppins-Light\",\n  \"Poppins-Medium\",\n  \"Poppins-Regular\",\n  \"Poppins-SemiBold\",\n  \"System Font\"\n];\n\nconst FormatColor: React.FC<FormatColor> = (props) => {\n  const { className } = props;\n  const [pickerColor, setPickerColor] = useState(createColor(\"#000000FF\"));\n  const TextToolContext = useContext(TextContext);\n  const colorContext = useContext(ColorContext);\n\n  const fontStyle = useMemo(() => {\n    return TextToolContext.fontStyle;\n  }, [TextToolContext.fontStyle]);\n\n  const activeColorType = colorContext.activeColor;\n\n  useEffect(() => {\n    colorContext.setColor(`#${pickerColor.hex}`);\n  }, [pickerColor]);\n\n  return (\n    <div className={className ? `ccc-text formatColor ${className}` : \"ccc-text colorpanel\"}>\n      <div className=\"content\">\n        <div>\n          <h3>Font</h3>\n          <Select\n            defaultValue=\"System Font\"\n            className=\"ccc-text-family\"\n            onChange={(value: string) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontFamily: value\n              });\n            }}\n          >\n            {textFamily.map((va) => {\n              return (\n                <Option key={va} value={va}>\n                  {va}\n                </Option>\n              );\n            })}\n          </Select>\n        </div>\n        <div className=\"font\">\n          <h3>Letter Spacing</h3>\n          <IntegerStep\n            min={1}\n            max={8}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                letterSpacing: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>Font Size</h3>\n          <IntegerStep\n            min={12}\n            max={720}\n            value={TextToolContext?.fontStyle?.fontSize}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontSize: value\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>Line Height</h3>\n          <IntegerStep\n            min={24}\n            max={56}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                lineHeight: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"material-color-box\">\n          <ColorPanel\n            type=\"text\"\n            className=\"toolbar-item\"\n            onChange={(color: string) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                color: color\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormatColor;\n","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/pen.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/util/tool/eraser.ts",["168"],"import { ColorType } from \"../toolType\";\nimport Tool, { Point, getMousePos, getPixelColorOnCanvas, getTouchPos, hexToRgb, updateImageData, clacArea } from \"./tool\";\nclass Eraser extends Tool {\n  protected lineWidthBase = 1;\n  private mouseDown = false;\n  private color = \"transparent\";\n  private saveImageData?: ImageData;\n  private previousPos: Point = {\n    x: 0,\n    y: 0\n  };\n  public constructor(lineSize:number) {\n    super();\n    this.lineWidthBase = lineSize;\n    this.color = \"transparent\";\n  }\n  private operateStart(pos: Point) {\n    if (!Tool.ctx) return;\n    this.saveImageData = Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height);\n    this.mouseDown = true;\n    this.color = getPixelColorOnCanvas(Tool.ctx, pos.x - 2, pos.y - 2);\n    Tool.ctx.lineWidth = this.lineWidthBase;\n    Tool.ctx.strokeStyle = this.color;\n    Tool.ctx.lineJoin = \"round\";\n    Tool.ctx.lineCap = \"round\";\n    Tool.ctx.beginPath();\n    this.previousPos = pos;\n  }\n  private operateMove(pos: Point) {\n    if (this.mouseDown) {\n      Tool.ctx.moveTo(this.previousPos.x, this.previousPos.y);\n      const c = 0.5 * (this.previousPos.x + pos.x);\n      const d = 0.5 * (this.previousPos.y + pos.y);\n      Tool.ctx.quadraticCurveTo(c, d, pos.x, pos.y);\n      Tool.ctx.stroke();\n      this.previousPos = pos;\n    }\n  }\n  private operateEnd() {\n    if (this.mouseDown) {\n      Tool.ctx.closePath();\n      this.mouseDown = false;\n      let imageData = Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height);\n      const colorRgb = hexToRgb(this.color);\n      if (colorRgb && this.saveImageData) {\n        imageData = updateImageData(this.saveImageData, imageData, [colorRgb.r, colorRgb.g, colorRgb.b, colorRgb.a]);\n\n        Tool.ctx.putImageData(imageData, 0, 0);\n      }\n    }\n  }\n  public onMouseDown(event: MouseEvent): void {\n    event.preventDefault();\n\n    const mousePos = getMousePos(Tool.ctx.canvas, event);\n\n      if (clacArea(mousePos)) { \n    this.operateStart(mousePos);\n    }\n  }\n\n  public onMouseUp(event: MouseEvent): void {\n    event.preventDefault();\n    this.operateEnd();\n  }\n\n  public onMouseMove(event: MouseEvent): void {\n    event.preventDefault();\n    const mousePos = getMousePos(Tool.ctx.canvas, event);\n    this.operateMove(mousePos);\n  }\n\n  public onTouchStart(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    const touchPos = getTouchPos(event.target as HTMLCanvasElement, event);\n    this.operateStart(touchPos);\n  }\n\n  public onTouchMove(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    const touchPos = getTouchPos(event.target as HTMLCanvasElement, event);\n    this.operateMove(touchPos);\n  }\n\n  public onTouchEnd(event: TouchEvent): void {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n    this.operateEnd();\n  }\n}\n\nexport default Eraser;\n","/Users/jinmingliu/work/ccc-react-paint/src/util/tool/colorFill.ts",["169","170","171","172","173","174","175"],"/Users/jinmingliu/work/ccc-react-paint/src/util/tool/colorExtract.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/util/tool/Text.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/right/components/colorPanel/index.tsx",["176","177","178","179","180","181"],"import React from \"react\";\nimport { useContext } from \"react\";\nimport { ColorContext, ToolTypeContext } from \"@/context\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport {\n  Pen,\n  Tool,\n  Eraser,\n  ColorExtract,\n  ColorFill,\n  Text,\n} from \"../../../util/tool\";\nimport \"./index.less\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { getRandomColor } from \"../../../utils\";\nimport { strawIcon } from \"../../../ToolTypeIcon\";\n\ninterface ColorPanelProps {\n  className?: string;\n  testTool?: Tool;\n  type?: string;\n  onChange?: (color: string) => void;\n}\n\nconst activeColorTypeCls = \"active-color-type\";\n\nconst ColorPanel: React.FC<ColorPanelProps> = (props) => {\n  const { className, type, onChange, testTool } = props;\n  const [pickerColor, setPickerColor] = useState(\n    createColor(type && type === \"pen\" ? getRandomColor() : \"#000000FF\")\n  );\n  const colorContext = useContext(ColorContext);\n  const ToolContext = useContext(ToolTypeContext);\n\n  useEffect(() => {\n    colorContext.setColor(`#${pickerColor.hex}`);\n  }, [pickerColor, testTool]);\n\n  const getStrawColor = () => {\n    const startTime = new Date().getTime();\n    const intervalId = setInterval(function () {\n      const endTime = new Date().getTime();\n      if (Math.abs(endTime - startTime) >= 10 * 60 * 1000) {\n        clearInterval(intervalId); //清除定时器 ,超过10分钟没有吸色功能 清楚定时器\n        ToolContext.setStrawType(false);\n      }\n      if (Tool.strawColor) {\n        setPickerColor(createColor(Tool.strawColor));\n        ToolContext.setStrawType(false);\n        clearInterval(intervalId); //清除定时器\n      }\n    }, 200);\n  };\n\n  return (\n    <div className={className ? `colorpanel ${className}` : \"colorpanel\"}>\n      <div className=\"content\">\n        <h3>Color</h3>\n        <div className=\"material-color-box\">\n          <ColorBox\n            value={pickerColor}\n            disableAlpha={false}\n            onChange={(color) => {\n              setPickerColor(color);\n              Tool.strawColor = \"\";\n              if (onChange) {\n                onChange(`#${color.hex}`);\n              }\n            }}\n          />\n          {type !== \"text\" && (\n            <span\n              className={`straw-color ${Tool.strawFlag ? \"select-item\" : \"\"}`}\n              onClick={() => {\n                Tool.strawFlag = true;\n                Tool.strawColor = \"\";\n                ToolContext.setStrawType(true);\n                getStrawColor();\n              }}\n            >\n              {strawIcon}\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ColorPanel;\n","/Users/jinmingliu/work/ccc-react-paint/src/right/components/shape/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/right/components/slider/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/utils.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/ToolTypeIcon.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/canvas/utils.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/util/tool/colorChange.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/components/loading/index.tsx",[],{"ruleId":"182","severity":1,"message":"183","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":20},{"ruleId":"182","severity":1,"message":"186","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":24},{"ruleId":"182","severity":1,"message":"187","line":61,"column":5,"nodeType":"184","messageId":"185","endLine":61,"endColumn":13},{"ruleId":"188","severity":1,"message":"189","line":241,"column":9,"nodeType":"190","messageId":"191","endLine":241,"endColumn":17,"suggestions":"192"},{"ruleId":"188","severity":1,"message":"189","line":248,"column":23,"nodeType":"190","messageId":"191","endLine":248,"endColumn":36,"suggestions":"193"},{"ruleId":"188","severity":1,"message":"189","line":279,"column":23,"nodeType":"190","messageId":"191","endLine":279,"endColumn":36,"suggestions":"194"},{"ruleId":"188","severity":1,"message":"189","line":287,"column":22,"nodeType":"190","messageId":"191","endLine":287,"endColumn":32,"suggestions":"195"},{"ruleId":"188","severity":1,"message":"189","line":288,"column":21,"nodeType":"190","messageId":"191","endLine":288,"endColumn":31,"suggestions":"196"},{"ruleId":"188","severity":1,"message":"189","line":374,"column":23,"nodeType":"190","messageId":"191","endLine":374,"endColumn":36,"suggestions":"197"},{"ruleId":"182","severity":1,"message":"198","line":375,"column":31,"nodeType":"184","messageId":"185","endLine":375,"endColumn":37},{"ruleId":"188","severity":1,"message":"189","line":376,"column":37,"nodeType":"190","messageId":"191","endLine":376,"endColumn":47,"suggestions":"199"},{"ruleId":"182","severity":1,"message":"200","line":377,"column":20,"nodeType":"184","messageId":"185","endLine":377,"endColumn":31},{"ruleId":"182","severity":1,"message":"201","line":377,"column":41,"nodeType":"184","messageId":"185","endLine":377,"endColumn":53},{"ruleId":"188","severity":1,"message":"189","line":378,"column":7,"nodeType":"190","messageId":"191","endLine":378,"endColumn":17,"suggestions":"202"},{"ruleId":"188","severity":1,"message":"189","line":419,"column":7,"nodeType":"190","messageId":"191","endLine":419,"endColumn":14,"suggestions":"203"},{"ruleId":"182","severity":1,"message":"204","line":437,"column":13,"nodeType":"184","messageId":"185","endLine":437,"endColumn":20},{"ruleId":"182","severity":1,"message":"205","line":437,"column":22,"nodeType":"184","messageId":"185","endLine":437,"endColumn":29},{"ruleId":"188","severity":1,"message":"189","line":452,"column":7,"nodeType":"190","messageId":"191","endLine":452,"endColumn":14,"suggestions":"206"},{"ruleId":"188","severity":1,"message":"189","line":12,"column":58,"nodeType":"190","messageId":"191","endLine":12,"endColumn":62,"suggestions":"207"},{"ruleId":"182","severity":1,"message":"208","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":19},{"ruleId":"182","severity":1,"message":"209","line":7,"column":10,"nodeType":"184","messageId":"185","endLine":7,"endColumn":14},{"ruleId":"182","severity":1,"message":"210","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":18},{"ruleId":"182","severity":1,"message":"211","line":15,"column":23,"nodeType":"184","messageId":"185","endLine":15,"endColumn":37},{"ruleId":"182","severity":1,"message":"208","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":19},{"ruleId":"182","severity":1,"message":"210","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":18},{"ruleId":"182","severity":1,"message":"211","line":34,"column":23,"nodeType":"184","messageId":"185","endLine":34,"endColumn":37},{"ruleId":"182","severity":1,"message":"212","line":42,"column":9,"nodeType":"184","messageId":"185","endLine":42,"endColumn":24},{"ruleId":"182","severity":1,"message":"213","line":1,"column":10,"nodeType":"184","messageId":"185","endLine":1,"endColumn":19},{"ruleId":"182","severity":1,"message":"214","line":1,"column":59,"nodeType":"184","messageId":"185","endLine":1,"endColumn":67},{"ruleId":"182","severity":1,"message":"215","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":18},{"ruleId":"182","severity":1,"message":"216","line":3,"column":20,"nodeType":"184","messageId":"185","endLine":3,"endColumn":28},{"ruleId":"182","severity":1,"message":"217","line":61,"column":9,"nodeType":"184","messageId":"185","endLine":61,"endColumn":17},{"ruleId":"182","severity":1,"message":"218","line":71,"column":11,"nodeType":"184","messageId":"185","endLine":71,"endColumn":17},{"ruleId":"182","severity":1,"message":"219","line":78,"column":12,"nodeType":"184","messageId":"185","endLine":78,"endColumn":19},{"ruleId":"182","severity":1,"message":"220","line":86,"column":9,"nodeType":"184","messageId":"185","endLine":86,"endColumn":14},{"ruleId":"182","severity":1,"message":"221","line":6,"column":3,"nodeType":"184","messageId":"185","endLine":6,"endColumn":6},{"ruleId":"182","severity":1,"message":"222","line":8,"column":3,"nodeType":"184","messageId":"185","endLine":8,"endColumn":9},{"ruleId":"182","severity":1,"message":"223","line":9,"column":3,"nodeType":"184","messageId":"185","endLine":9,"endColumn":15},{"ruleId":"182","severity":1,"message":"224","line":10,"column":3,"nodeType":"184","messageId":"185","endLine":10,"endColumn":12},{"ruleId":"182","severity":1,"message":"225","line":11,"column":3,"nodeType":"184","messageId":"185","endLine":11,"endColumn":7},{"ruleId":"182","severity":1,"message":"226","line":26,"column":7,"nodeType":"184","messageId":"185","endLine":26,"endColumn":25},"@typescript-eslint/no-unused-vars","'Ref' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","'setColor' is assigned a value but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["227"],["228"],["229"],["230"],["231"],["232"],"'deltaX' is assigned a value but never used.",["233"],"'canvasWidth' is assigned a value but never used.","'canvasHeight' is assigned a value but never used.",["234"],["235"],"'clientX' is assigned a value but never used.","'clientY' is assigned a value but never used.",["236"],["237"],"'FC' is defined but never used.","'Tool' is defined but never used.","'ColorBox' is defined but never used.","'setPickerColor' is assigned a value but never used.","'activeColorType' is assigned a value but never used.","'ColorType' is defined but never used.","'clacArea' is defined but never used.","'throttle' is defined but never used.","'debounce' is defined but never used.","'y_bottom' is assigned a value but never used.","'x_left' is assigned a value but never used.","'x_right' is assigned a value but never used.","'y_top' is assigned a value but never used.","'Pen' is defined but never used.","'Eraser' is defined but never used.","'ColorExtract' is defined but never used.","'ColorFill' is defined but never used.","'Text' is defined but never used.","'activeColorTypeCls' is assigned a value but never used.",{"messageId":"238","fix":"239","desc":"240"},{"messageId":"238","fix":"241","desc":"240"},{"messageId":"238","fix":"242","desc":"240"},{"messageId":"238","fix":"243","desc":"240"},{"messageId":"238","fix":"244","desc":"240"},{"messageId":"238","fix":"245","desc":"240"},{"messageId":"238","fix":"246","desc":"240"},{"messageId":"238","fix":"247","desc":"240"},{"messageId":"238","fix":"248","desc":"240"},{"messageId":"238","fix":"249","desc":"240"},{"messageId":"238","fix":"250","desc":"240"},"suggestOptionalChain",{"range":"251","text":"252"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"253","text":"252"},{"range":"254","text":"252"},{"range":"255","text":"252"},{"range":"256","text":"252"},{"range":"257","text":"252"},{"range":"258","text":"252"},{"range":"259","text":"252"},{"range":"260","text":"252"},{"range":"261","text":"252"},{"range":"262","text":"252"},[6412,6413],"?",[6585,6586],[7704,7705],[7943,7944],[7988,7989],[10216,10217],[10337,10338],[10436,10437],[11330,11331],[12556,12557],[262,263]]