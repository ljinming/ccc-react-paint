[{"/Users/ming/code-work/ccc-react-paint/src/index.tsx":"1","/Users/ming/code-work/ccc-react-paint/src/CCCPaint.tsx":"2","/Users/ming/code-work/ccc-react-paint/src/util/toolType.ts":"3","/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/index.ts":"4","/Users/ming/code-work/ccc-react-paint/src/context/index.ts":"5","/Users/ming/code-work/ccc-react-paint/src/util/tool/shape.ts":"6","/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/event.ts":"7","/Users/ming/code-work/ccc-react-paint/src/util/tool/tool.ts":"8","/Users/ming/code-work/ccc-react-paint/src/util/tool/index.ts":"9","/Users/ming/code-work/ccc-react-paint/src/util/snapshot/index.ts":"10","/Users/ming/code-work/ccc-react-paint/src/util/tool/pen.ts":"11","/Users/ming/code-work/ccc-react-paint/src/util/tool/colorExtract.ts":"12","/Users/ming/code-work/ccc-react-paint/src/util/tool/eraser.ts":"13","/Users/ming/code-work/ccc-react-paint/src/util/tool/Text.ts":"14","/Users/ming/code-work/ccc-react-paint/src/util/tool/colorFill.ts":"15","/Users/ming/code-work/ccc-react-paint/src/utils.tsx":"16","/Users/ming/code-work/ccc-react-paint/src/right/index.tsx":"17","/Users/ming/code-work/ccc-react-paint/src/left-tool/index.tsx":"18","/Users/ming/code-work/ccc-react-paint/src/canvas/index.tsx":"19","/Users/ming/code-work/ccc-react-paint/src/edit/index.tsx":"20","/Users/ming/code-work/ccc-react-paint/src/left-tool/util.tsx":"21","/Users/ming/code-work/ccc-react-paint/src/edit/Resize.tsx":"22","/Users/ming/code-work/ccc-react-paint/src/right/showShape/index.tsx":"23","/Users/ming/code-work/ccc-react-paint/src/right/pen/index.tsx":"24","/Users/ming/code-work/ccc-react-paint/src/right/text/index.tsx":"25","/Users/ming/code-work/ccc-react-paint/src/right/formatColor/index.tsx":"26","/Users/ming/code-work/ccc-react-paint/src/right/components/colorPanel/index.tsx":"27","/Users/ming/code-work/ccc-react-paint/src/right/components/shape/index.tsx":"28","/Users/ming/code-work/ccc-react-paint/src/right/components/slider/index.tsx":"29","/Users/ming/code-work/ccc-react-paint/src/right/earser/index.tsx":"30"},{"size":161,"mtime":1655202573949,"results":"31","hashOfConfig":"32"},{"size":6028,"mtime":1655271421870,"results":"33","hashOfConfig":"32"},{"size":918,"mtime":1655099997921,"results":"34","hashOfConfig":"32"},{"size":2010,"mtime":1654835133986,"results":"35","hashOfConfig":"32"},{"size":1418,"mtime":1655092109302,"results":"36","hashOfConfig":"32"},{"size":8172,"mtime":1654835133987,"results":"37","hashOfConfig":"32"},{"size":136,"mtime":1655092109303,"results":"38","hashOfConfig":"32"},{"size":3074,"mtime":1655270188423,"results":"39","hashOfConfig":"32"},{"size":247,"mtime":1654835133987,"results":"40","hashOfConfig":"32"},{"size":984,"mtime":1655217208011,"results":"41","hashOfConfig":"32"},{"size":2811,"mtime":1655273793219,"results":"42","hashOfConfig":"32"},{"size":1008,"mtime":1654835133987,"results":"43","hashOfConfig":"32"},{"size":2869,"mtime":1655273799342,"results":"44","hashOfConfig":"32"},{"size":3520,"mtime":1655272120398,"results":"45","hashOfConfig":"32"},{"size":3621,"mtime":1655092109303,"results":"46","hashOfConfig":"32"},{"size":1159,"mtime":1655269643266,"results":"47","hashOfConfig":"32"},{"size":1113,"mtime":1655271906587,"results":"48","hashOfConfig":"32"},{"size":2683,"mtime":1655202794901,"results":"49","hashOfConfig":"32"},{"size":10275,"mtime":1655273698982,"results":"50","hashOfConfig":"32"},{"size":1611,"mtime":1655273079625,"results":"51","hashOfConfig":"32"},{"size":10537,"mtime":1655273281429,"results":"52","hashOfConfig":"32"},{"size":2272,"mtime":1655202794900,"results":"53","hashOfConfig":"32"},{"size":511,"mtime":1655202794904,"results":"54","hashOfConfig":"32"},{"size":854,"mtime":1655271723182,"results":"55","hashOfConfig":"32"},{"size":3327,"mtime":1655202794904,"results":"56","hashOfConfig":"32"},{"size":1126,"mtime":1655202794903,"results":"57","hashOfConfig":"32"},{"size":1823,"mtime":1655272902604,"results":"58","hashOfConfig":"32"},{"size":3639,"mtime":1655202794902,"results":"59","hashOfConfig":"32"},{"size":837,"mtime":1655271643312,"results":"60","hashOfConfig":"32"},{"size":729,"mtime":1655273211646,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1tiwiaa",{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"64"},"/Users/ming/code-work/ccc-react-paint/src/index.tsx",[],[],"/Users/ming/code-work/ccc-react-paint/src/CCCPaint.tsx",["131"],"import React, { Ref, useEffect, useImperativeHandle } from \"react\";\nimport Canvas from \"./canvas\";\nimport {\n  ToolTypeContext,\n  ShapeTypeContext,\n  ShapeOutlineContext,\n  LineWidthContext,\n  ColorContext,\n  FillContext,\n  TextContext,\n  SizeContext,\n  DispatcherContext\n} from \"./context\";\nimport \"./style.less\";\nimport { useState } from \"react\";\nimport { ColorType, LineWidthType, ShapeOutlineType, ShapeToolType, ToolType } from \"./util/toolType\";\nimport ToolPanel from \"./left-tool\";\nimport Dispatcher from \"./util/dispatcher\";\nimport Right from \"./right\";\nimport Edit from \"./edit\";\nimport { getImageSize } from \"./utils\";\n\ninterface PaintProps {\n  imgSrc?: string;\n  width?: number;\n  height?: number;\n  background?: string;\n  id?: string;\n  cRef?: any;\n}\n\nfunction Paint(props: PaintProps): JSX.Element {\n  const {\n    id = \"test\",\n    imgSrc = \"https://bafybeifbtjkiisih2voul3gzzy6mswi37ym2bwoz7wczeozdjufxntl65y.ipfs.dweb.link/orign.png\",\n    width = 500,\n    height = 500,\n    background,\n    cRef\n  } = props;\n\n  const [toolType, setToolType] = useState<ToolType>(ToolType.PEN);\n  const [shapeType, setShapeType] = useState<ShapeToolType>(ShapeToolType.LINE);\n  const [shapeOutlineType, setShapeOutlineType] = useState<ShapeOutlineType>(ShapeOutlineType.SOLID);\n  const [lineWidthType, setLineWidthType] = useState<LineWidthType>(LineWidthType.LINESIZE);\n  const [lineSize, setLineFontSize] = useState<number>(5);\n  const [fillColor, setFillColor] = useState<string>(\"\");\n  const [size, setSize] = useState({ width, height });\n  const [activeColorType, setActiveColorType] = useState<ColorType>(ColorType.MAIN);\n  const [fontStyle, setFontStyle] = useState({});\n  const [mainColor, setMainColor] = useState<string>(\"black\");\n  const [subColor, setSubColor] = useState<string>(\"white\");\n  const [dispatcher] = useState(new Dispatcher());\n\n  const setColor = (value: string) => {\n    if (activeColorType === ColorType.MAIN) {\n      setMainColor(value);\n    } else {\n      setSubColor(value);\n    }\n  };\n\n  const loadImgSize = async (src: string) => {\n    const size = await getImageSize(src);\n    setSize(size);\n  };\n\n  useEffect(() => {\n    if (imgSrc) {\n      loadImgSize(imgSrc);\n    } else {\n      if (width && height) {\n        setSize({ width, height });\n      }\n    }\n  }, [width, height, imgSrc]);\n\n  useImperativeHandle(cRef, () => ({\n    getCurrentImageData: () => {\n      const canvasElem: any = document.getElementById(`ccc-paint-canvas ${id}`);\n      const imageData = canvasElem.toDataURL(\"image/png\");\n      return imageData;\n    }\n  }));\n\n  return (\n    <ToolTypeContext.Provider\n      value={{\n        type: toolType,\n        setType: (value) => {\n          setToolType(value);\n          setLineFontSize(5);\n        }\n      }}\n    >\n      <ShapeTypeContext.Provider\n        value={{\n          type: shapeType,\n          setType: (type: ShapeToolType) => {\n            setShapeType(type);\n          }\n        }}\n      >\n        <ShapeOutlineContext.Provider value={{ type: shapeOutlineType, setType: setShapeOutlineType }}>\n          <LineWidthContext.Provider\n            value={{\n              type: lineWidthType,\n              lineSize: lineSize,\n              setType: setLineWidthType,\n              setLineSize: setLineFontSize\n            }}\n          >\n            <DispatcherContext.Provider value={{ dispatcher }}>\n              <ColorContext.Provider\n                value={{\n                  mainColor,\n                  subColor,\n                  activeColor: activeColorType,\n                  setColor,\n                  setActiveColor: setActiveColorType\n                }}\n              >\n                <SizeContext.Provider value={{ size, onSize: setSize }}>\n                  <FillContext.Provider\n                    value={{\n                      fillColor,\n                      setFillColor\n                    }}\n                  >\n                    <TextContext.Provider\n                      value={{\n                        fontStyle,\n                        setFont: setFontStyle\n                      }}\n                    >\n                      <div className=\"ccc\">\n                        <div className=\"ccc-edit\">\n                          <Edit CanvasSize={size} />\n                        </div>\n                        <div className=\"ccc-content\">\n                          <div className=\"ToolPanel\">\n                            <ToolPanel className=\"toolbar-item\" fillColor={fillColor} />\n                          </div>\n                          <div className=\"show-Canvas\">\n                            <Canvas\n                              id={id}\n                              CanvasSize={size}\n                              imgSrc={imgSrc}\n                              background={background}\n                              onSize={setSize}\n                              fillColor={fillColor}\n                              toolType={toolType}\n                              fontStyle={fontStyle}\n                              shapeType={shapeType}\n                              shapeOutlineType={shapeOutlineType}\n                              mainColor={mainColor}\n                              subColor={subColor}\n                              lineSize={lineSize}\n                              lineWidthType={lineWidthType}\n                              setColor={setColor}\n                            />\n                          </div>\n                          <div className=\"show-type\">\n                            <Right toolType={toolType} lineSize={lineSize} />\n                          </div>\n                        </div>\n                      </div>\n                    </TextContext.Provider>\n                  </FillContext.Provider>\n                </SizeContext.Provider>\n              </ColorContext.Provider>\n            </DispatcherContext.Provider>\n          </LineWidthContext.Provider>\n        </ShapeOutlineContext.Provider>\n      </ShapeTypeContext.Provider>\n    </ToolTypeContext.Provider>\n  );\n}\n\nexport default Paint;\n","/Users/ming/code-work/ccc-react-paint/src/util/toolType.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/context/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/shape.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/dispatcher/event.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/tool.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/snapshot/index.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/pen.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/colorExtract.ts",[],"/Users/ming/code-work/ccc-react-paint/src/util/tool/eraser.ts",["132"],"/Users/ming/code-work/ccc-react-paint/src/util/tool/Text.ts",["133","134"],"import Tool from \"./tool\";\n\n// interface propsInput = {\n//             x?: number,\n//             y?: Number,\n//             maxWidth?:Number\n// }\n\nclass Text extends Tool {\n  private isMouseDown = false;\n  private saveImageData?: ImageData;\n  private _x: number;\n  private _y: number;\n  private textContent: string;\n  private textBox: any;\n  private fontStyle: any;\n  private canvas: any;\n  private canvasText: any;\n  public constructor(fontType: any) {\n    super();\n    this._x = NaN;\n    this._y = NaN;\n    this.textBox = document.getElementById(\"textBox\");\n    this.canvasText = document.getElementById(\"canvas-text\");\n\n    this.textContent = \"\";\n    this.fontStyle = fontType;\n  }\n\n  private drawing(x: number, y: number) {\n    const context = Tool.ctx;\n    if (!context) {\n      return;\n    } else {\n      // 设置画笔的颜色和大小\n      context.fillStyle = \"#000\"; // 填充颜色为红色\n      context.lineWidth = 5; // 指定描边线的宽度\n      context.font = \"10px\";\n      if (context && this.fontStyle) {\n        const { fontSize = \"12px\", fontFamily, color, letterSpacing } = this.fontStyle;\n        context.fillStyle = color || \"#000\";\n        context.font = `${fontSize} ${fontFamily}`;\n        if (context.canvas && letterSpacing) {\n          context.canvas.style.letterSpacing = letterSpacing;\n        }\n      }\n\n      // 写字\n      //   const width = this.canvas.offsetWidth;\n      //   console.log(\"----546\", this.canvas);\n      //   const height = this.canvas.offsetHeight;\n      //   const tempImg = new Image();\n      //   tempImg.width = width;\n      //   tempImg.height = height;\n      //   tempImg.onload = function () {\n      //     // 把img绘制在canvas画布上\n      //     context.drawImage(tempImg, 0, 0, width, height);\n      //   };\n      //   (tempImg.src =\n      //     'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"><foreignObject width=\"' +\n      //     width +\n      //     '\" height=\"' +\n      //     height +\n      //     '\"><body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;font:' +\n      //     context.font +\n      //     ';\">' +\n      //     this.textContent),\n      //     +\"</body></foreignObject></svg>\";\n      context.fillText(this.textContent, parseInt(this.textBox.style.left), parseInt(this.textBox.style.top));\n      // this.wrapText(this.textContent, parseInt(this.textBox.style.left), parseInt(this.textBox.style.top));\n    }\n  }\n\n  public onMouseDown(event: MouseEvent): void {\n    // 鼠标按下位置保存\n\n    event.preventDefault();\n    if (this.isMouseDown) {\n      this.textContent = this.textBox.value;\n      this.isMouseDown = false;\n      this.textBox.style[\"z-index\"] = -1;\n      this.canvasText.style[\"z-index\"] = -1;\n      this.textBox.style.visibility = \"hidden\";\n      this.drawing(this._x, this._y);\n      this.textBox.value = \"\";\n    } else if (!this.isMouseDown) {\n      this._x = event.offsetX; // 鼠标按下时保存当前位置，为起始位置\n      this._y = event.offsetY;\n      this.isMouseDown = true;\n      this.textBox.value = \"\";\n      if (typeof this.fontStyle === \"object\") {\n        Object.keys(this.fontStyle).forEach((va) => {\n          this.textBox.style[va] = this.fontStyle[va];\n        });\n      }\n      this.canvasText.style[\"z-index\"] = 5;\n      this.textBox.style[\"z-index\"] = 6;\n      this.textBox.style.visibility = \"visible\";\n      this.textBox.style.left = this._x - 4 + \"px\";\n      this.textBox.style.top = this._y - 2 + \"px\";\n    }\n  }\n}\n\nexport default Text;\n","/Users/ming/code-work/ccc-react-paint/src/util/tool/colorFill.ts",[],"/Users/ming/code-work/ccc-react-paint/src/utils.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/right/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/left-tool/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/canvas/index.tsx",["135","136","137"],"import React, { useMemo } from \"react\";\nimport \"./index.less\";\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { LineWidthType, ShapeOutlineType, ShapeToolType, ToolType } from \"../util/toolType\";\nimport { FC } from \"react\";\nimport { useState } from \"react\";\nimport { Pen, Tool, Eraser, ColorExtract, ColorFill, Text } from \"../util/tool\";\nimport Shape from \"../util/tool/shape\";\nimport { useContext } from \"react\";\nimport { DispatcherContext } from \"../context\";\nimport { CLEAR_EVENT, REDO_EVENT, UNDO_EVENT } from \"../util/dispatcher/event\";\nimport SnapShot from \"../util/snapshot\";\nimport { Input } from \"antd\";\n\nconst { TextArea } = Input;\n\ninterface CanvasProps {\n  toolType: ToolType;\n  shapeType: ShapeToolType;\n  shapeOutlineType: ShapeOutlineType;\n  lineWidthType: LineWidthType;\n  mainColor: string;\n  subColor: string;\n  lineSize?: number;\n  fillColor: string;\n  fontStyle: any;\n  imgSrc?: string;\n  CanvasSize: {\n    width?: number;\n    height?: number;\n  };\n  id: string;\n  background?: string;\n  onSize?: (value: any) => void;\n  setColor: (value: string) => void;\n}\n\nconst Canvas: FC<CanvasProps> = (props) => {\n  const {\n    id,\n    toolType,\n    lineWidthType,\n    mainColor,\n    subColor,\n    setColor,\n    CanvasSize,\n    fillColor,\n    shapeType,\n    shapeOutlineType,\n    fontStyle,\n    imgSrc,\n    background,\n    lineSize = 1,\n    onSize\n  } = props;\n  const [tool, setTool] = useState<Tool>();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const allCanvasRef = useRef<HTMLDivElement>(null);\n  const dispatcherContext = useContext(DispatcherContext);\n  const [snapshot] = useState<SnapShot>(new SnapShot());\n\n  useEffect(() => {\n    switch (toolType) {\n      case ToolType.PEN:\n        setTool(new Pen());\n        break;\n      case ToolType.ERASER:\n        setTool(new Eraser(lineSize));\n        break;\n      case ToolType.COLOR_EXTRACT:\n        setTool(new ColorExtract(setColor));\n        break;\n      case ToolType.COLOR_FILL:\n        setTool(new ColorFill());\n        break;\n      case ToolType.TEXT:\n        setTool(new Text(fontStyle));\n        break;\n      case ToolType.SHAPE:\n        setTool(new Shape(shapeType, shapeOutlineType === ShapeOutlineType.DOTTED));\n        break;\n      default:\n        break;\n    }\n  }, [toolType, shapeType, fontStyle, lineSize]);\n\n  useEffect(() => {\n    if (tool instanceof Shape) {\n      tool.isDashed = shapeOutlineType === ShapeOutlineType.DOTTED;\n    }\n  }, [shapeOutlineType]);\n\n  useEffect(() => {\n    console.log(\"=====5\", lineSize);\n    switch (lineWidthType) {\n      case LineWidthType.THIN:\n        Tool.lineWidthFactor = 1;\n        break;\n      case LineWidthType.MIDDLE:\n        Tool.lineWidthFactor = 2;\n        break;\n      case LineWidthType.BOLD:\n        Tool.lineWidthFactor = 3;\n        break;\n      case LineWidthType.MAXBOLD:\n        Tool.lineWidthFactor = 4;\n        break;\n      case LineWidthType.LINESIZE:\n        Tool.lineWidthFactor = lineSize;\n        break;\n      default:\n        break;\n    }\n  }, [lineWidthType, lineSize]);\n\n  useEffect(() => {\n    Tool.mainColor = mainColor;\n  }, [mainColor]);\n\n  useEffect(() => {\n    Tool.fillColor = fillColor;\n  }, [fillColor]);\n\n  useEffect(() => {\n    Tool.subColor = subColor;\n  }, [subColor]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n      canvas.height = height;\n      canvas.width = width;\n      Tool.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        if (imgSrc) {\n          const img = new Image();\n          img.crossOrigin = \"anonymous\";\n          img.src = imgSrc;\n          img.onload = function () {\n            canvas.height = img.height;\n            canvas.width = img.width;\n            /*1.在canvas 中绘制图像*/\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          };\n        } else {\n          ctx.fillStyle = background || \"white\";\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n      }\n\n      // 注册清空画布事件\n      const dispatcher = dispatcherContext.dispatcher;\n      const callback = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          if (imgSrc) {\n            const img = new Image();\n            img.crossOrigin = \"anonymous\";\n            img.src = imgSrc;\n            img.onload = function () {\n              const { width, height } = img;\n              /*1.在canvas 中绘制图像*/\n              ctx.drawImage(img, 0, 0);\n              /*2.从canvas 中获取图像的ImageData*/\n              const imgData = ctx.getImageData(0, 0, width, height);\n              /*3.在canvas 中显示ImageData*/\n              ctx.putImageData(\n                imgData,\n                //位置\n                0,\n                height\n              );\n            };\n          } else {\n            ctx.fillStyle = \"white\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n          }\n        }\n      };\n      dispatcher.on(CLEAR_EVENT, callback);\n\n      // 注册画布前进事件\n      const forward = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          const imageData = snapshot.forward();\n          if (imageData) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n        }\n      };\n      dispatcher.on(REDO_EVENT, forward);\n\n      // 注册画布后退事件\n      const back = () => {\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n          const imageData = snapshot.back();\n          if (imageData) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n        }\n      };\n      dispatcher.on(UNDO_EVENT, back);\n\n      const changeSize = () => {\n        const canvasData = Tool.ctx.getImageData(0, 0, canvas.width, canvas.height);\n        // const changWidth = allCanvasRef.current?.clientWidth || width;\n        // const changHeight = allCanvasRef.current?.clientHeight || height;\n        //  canvasPain(Tool.ctx, changWidth, changHeight, canvasData);\n      };\n      window.addEventListener(\"resize\", changeSize);\n\n      return () => {\n        dispatcher.off(CLEAR_EVENT, callback);\n      };\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        const canvasData = ctx?.getImageData(0, 0, canvas.width, canvas.height);\n        const height = CanvasSize.height;\n        const width = CanvasSize.width;\n        if (width && height) {\n          Tool.ctx = ctx as CanvasRenderingContext2D;\n          canvasPain(Tool.ctx, width, height, canvasData);\n        }\n      }\n    }\n  }, [CanvasSize]);\n\n  // 注册画布size事件\n  const canvasPain = async (ctx: CanvasRenderingContext2D, width: number, height: number, canvasData: ImageData) => {\n    console.log(\"===56\", width, height);\n    if (ctx) {\n      const canvas = canvasRef.current;\n      if (canvas) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        canvas.height = height;\n        canvas.width = width;\n        if (canvasData) {\n          ctx.drawImage(await createImageBitmap(canvasData), 0, 0, width, height);\n        } else {\n          ctx.fillStyle = background || \"white\";\n          ctx.fillRect(0, 0, width, height);\n        }\n      }\n      snapshot.add(ctx.getImageData(0, 0, width, height));\n    }\n  };\n\n  const onMouseDown = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseDown(event);\n    }\n  };\n\n  const onMouseMove = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseMove(event);\n    }\n  };\n\n  const onMouseUp = (event: MouseEvent) => {\n    if (tool) {\n      tool.onMouseUp(event);\n\n      // 存储canvas剪影\n      snapshot.add(Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height));\n    }\n  };\n\n  const onTouchStart = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchStart(event);\n    }\n  };\n\n  const onTouchMove = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchMove(event);\n    }\n  };\n\n  const onTouchEnd = (event: TouchEvent) => {\n    if (tool) {\n      tool.onTouchEnd(event);\n    }\n\n    // 存储canvas剪影\n    snapshot.add(Tool.ctx.getImageData(0, 0, Tool.ctx.canvas.width, Tool.ctx.canvas.height));\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.addEventListener(\"mousedown\", onMouseDown);\n      canvas.addEventListener(\"mousemove\", onMouseMove);\n      canvas.addEventListener(\"mouseup\", onMouseUp);\n      // canvas.addEventListener(\"mousewheel\", onMousewheel);\n\n      canvas.addEventListener(\"touchstart\", onTouchStart);\n      canvas.addEventListener(\"touchmove\", onTouchMove);\n      canvas.addEventListener(\"touchend\", onTouchEnd);\n\n      return () => {\n        canvas.removeEventListener(\"mousedown\", onMouseDown);\n        canvas.removeEventListener(\"mousemove\", onMouseMove);\n        canvas.removeEventListener(\"mouseup\", onMouseUp);\n        // canvas.removeEventListener(\"mousewheel\", onMousewheel);\n\n        canvas.removeEventListener(\"touchstart\", onTouchStart);\n        canvas.removeEventListener(\"touchmove\", onTouchMove);\n        canvas.removeEventListener(\"touchend\", onTouchEnd);\n      };\n    }\n  }, [canvasRef, onMouseDown, onMouseMove, onMouseUp]);\n\n  const style = {\n    margin: \"auto\"\n  };\n  if (allCanvasRef && CanvasSize) {\n    const allCanvas = allCanvasRef.current;\n    if (allCanvas) {\n      style.margin = allCanvas.offsetWidth < (CanvasSize?.width || 0) ? \"unset\" : \"auto\";\n    }\n  }\n  return (\n    <div className=\"all-canvas\" ref={allCanvasRef}>\n      <canvas\n        id={`ccc-paint-canvas ${id}`}\n        className=\"ccc-paint-canvas\"\n        ref={canvasRef}\n        style={{ background: background || \"#fff\", ...style }}\n      ></canvas>\n      <div\n        className=\"canvas-text\"\n        id=\"canvas-text\"\n        style={{ width: CanvasSize.width, height: CanvasSize.height, ...style }}\n      >\n        <TextArea id=\"textBox\" name=\"story\" autoFocus={true} className=\"text-box\" rows={1} />\n      </div>\n    </div>\n  );\n};\n\nexport default Canvas;\n","/Users/ming/code-work/ccc-react-paint/src/edit/index.tsx",["138"],"import React from \"react\";\nimport \"./index.less\";\nimport { useContext } from \"react\";\nimport { DispatcherContext } from \"@/context\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport { CLEAR_EVENT, REDO_EVENT, UNDO_EVENT } from \"../util/dispatcher/event\";\nimport Resize from \"./Resize\";\nimport { undoIcon, clearIcon } from \"../left-tool/util\";\n\ninterface propsEdit {\n  CanvasSize: {\n    width: number | undefined;\n    height: number | undefined;\n  };\n}\n\nconst OtherOperator = (props: propsEdit) => {\n  const { CanvasSize } = props;\n  const dispatcherContext = useContext(DispatcherContext);\n\n  const clearCanvas = () => {\n    dispatcherContext.dispatcher.dispatch(CLEAR_EVENT);\n  };\n  const undo = () => {\n    dispatcherContext.dispatcher.dispatch(UNDO_EVENT);\n  };\n  const redo = () => {\n    dispatcherContext.dispatcher.dispatch(REDO_EVENT);\n  };\n\n  return (\n    <div className=\"edit-other otherOperator\">\n      <div className=\"operator-content\">\n        <span className=\"showSizeSpan\">\n          {CanvasSize.width}*{CanvasSize.height}\n        </span>\n        <span className=\"operator-resize\">\n          <Resize />\n        </span>\n        <span title=\"clear\" className=\"operator-item\">\n          <span onClick={clearCanvas}>{clearIcon}</span>\n        </span>\n        <span title=\"undo\" className=\"operator-item\">\n          <span onClick={undo}>{undoIcon}</span>\n        </span>\n        <span title=\"redo\" style={{ transform: \"rotateY(180deg)\" }} className=\"operator-item\">\n          <span onClick={redo}>{undoIcon}</span>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default OtherOperator;\n","/Users/ming/code-work/ccc-react-paint/src/left-tool/util.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/edit/Resize.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/right/showShape/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/right/pen/index.tsx",["139"],"import React, { FC } from \"react\";\nimport { useContext } from \"react\";\nimport { LineWidthContext } from \"@/context\";\nimport IntegerStep from \"../components/slider\";\nimport ColorPanel from \"../components/colorPanel\";\nimport \"./index.less\";\n\ninterface PenType {\n  lineSize: number;\n}\n\nconst ShowPen = (props: PenType) => {\n  const lineWidthContext = useContext(LineWidthContext);\n\n  const { lineSize } = props;\n\n  return (\n    <div className=\"ccc-pen\">\n      <div className=\"ccc-slider-item\">\n        <h3>Brush thickness</h3>\n        <IntegerStep\n          min={1}\n          max={20}\n          value={lineSize}\n          onPropsChange={(value) => {\n            lineWidthContext.setLineSize(value);\n          }}\n        />\n      </div>\n      <ColorPanel type=\"pen\" className=\"toolbar-item\" title=\"Color Panel\" />\n    </div>\n  );\n};\n\nexport default ShowPen;\n","/Users/ming/code-work/ccc-react-paint/src/right/text/index.tsx",["140"],"import React from \"react\";\nimport { useContext } from \"react\";\nimport { TextContext, ColorContext } from \"@/context\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport \"./index.less\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Select } from \"antd\";\nimport IntegerStep from \"../components/slider\";\nimport { useMemo } from \"react\";\n\nconst { Option } = Select;\n\ninterface FormatColor {\n  className?: string;\n}\n\nconst textFamily = [\n  \"Barlow-ExtraBold\",\n  \"DIN-AlternateBold\",\n  \"Trebuchet-MSBold\",\n  \"Trebuchet-MS\",\n  \"Poppins-Bold\",\n  \"Poppins-Light\",\n  \"Poppins-Medium\",\n  \"Poppins-Regular\",\n  \"Poppins-SemiBold\"\n];\n\nconst FormatColor: React.FC<FormatColor> = (props) => {\n  const { className } = props;\n  const [pickerColor, setPickerColor] = useState(createColor(\"#000000FF\"));\n  const TextToolContext = useContext(TextContext);\n  const colorContext = useContext(ColorContext);\n\n  const fontStyle = useMemo(() => {\n    return TextToolContext.fontStyle;\n  }, [TextToolContext.fontStyle]);\n\n  const activeColorType = colorContext.activeColor;\n\n  useEffect(() => {\n    colorContext.setColor(`#${pickerColor.hex}`);\n  }, [pickerColor]);\n\n  return (\n    <div className={className ? ` ccc-text formatColor ${className}` : \"ccc-text colorpanel\"}>\n      <div className=\"content\">\n        <div className=\"font\">\n          <h3>Font</h3>\n          <Select\n            className=\"ccc-text-family\"\n            onChange={(value: string) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontFamily: value\n              });\n            }}\n          >\n            {textFamily.map((va) => {\n              return (\n                <Option key={va} value={va}>\n                  {va}\n                </Option>\n              );\n            })}\n          </Select>\n        </div>\n        <div className=\"font\">\n          <h3>Letter Spacing</h3>\n          <IntegerStep\n            min={1}\n            max={8}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                letterSpacing: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>Font Size</h3>\n          <IntegerStep\n            min={12}\n            max={72}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                fontSize: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <div className=\"font\">\n          <h3>FLine Height</h3>\n          <IntegerStep\n            min={24}\n            max={56}\n            onPropsChange={(value) => {\n              TextToolContext.setFont({\n                ...fontStyle,\n                lineHeight: value + \"px\"\n              });\n            }}\n          />\n        </div>\n        <h3>color</h3>\n        <div className=\"material-color-box\">\n          <ColorBox\n            value={pickerColor}\n            disableAlpha={false}\n            onChange={(color) => {\n              setPickerColor(color);\n              TextToolContext.setFont({\n                ...fontStyle,\n                color: \"#\" + color.hex\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormatColor;\n","/Users/ming/code-work/ccc-react-paint/src/right/formatColor/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/right/components/colorPanel/index.tsx",["141","142","143","144"],"import React from \"react\";\nimport { useContext } from \"react\";\nimport { ColorContext } from \"@/context\";\nimport { ColorType } from \"../../../util/toolType\";\nimport { ColorBox, createColor } from \"material-ui-color\";\nimport \"./index.less\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { getRandomColor } from \"../../../utils\";\n\ninterface ColorPanelProps {\n  className?: string;\n  title?: string;\n  type?: string;\n}\n\nconst activeColorTypeCls = \"active-color-type\";\n\nconst ColorPanel: React.FC<ColorPanelProps> = (props) => {\n  const { className, title, type } = props;\n\n  const [pickerColor, setPickerColor] = useState(createColor(type && type === \"pen\" ? getRandomColor() : \"#000000FF\"));\n  const colorContext = useContext(ColorContext);\n  const activeColorType = colorContext.activeColor;\n\n  useEffect(() => {\n    colorContext.setColor(`#${pickerColor.hex}`);\n  }, [pickerColor]);\n\n  return (\n    <div className={className ? `colorpanel ${className}` : \"colorpanel\"}>\n      <div className=\"content\">\n        <h3>color</h3>\n        <div className=\"material-color-box\">\n          <ColorBox\n            value={pickerColor}\n            disableAlpha={false}\n            onChange={(color) => {\n              setPickerColor(color);\n            }}\n          />\n        </div>\n        {/* {title && (\n          <div className=\"color-result\">\n            <div\n              onClick={() => colorContext.setActiveColor(ColorType.MAIN)}\n              className={activeColorType === ColorType.MAIN ? `main-color ${activeColorTypeCls}` : \"main-color\"}\n            >\n              <div className=\"color-box1\" style={{ backgroundColor: colorContext.mainColor }} />\n              <div>{title}</div>\n            </div>\n          </div>\n        )} */}\n      </div>\n    </div>\n  );\n};\n\nexport default ColorPanel;\n","/Users/ming/code-work/ccc-react-paint/src/right/components/shape/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/right/components/slider/index.tsx",[],"/Users/ming/code-work/ccc-react-paint/src/right/earser/index.tsx",["145"],"import React, { FC } from \"react\";\nimport { useContext } from \"react\";\nimport { LineWidthContext } from \"@/context\";\nimport IntegerStep from \"../components/slider\";\nimport \"./index.less\";\n\ninterface earserType {\n  lineSize: number;\n}\n\nconst Eraser = (props: earserType) => {\n  const { lineSize } = props;\n  const lineWidthContext = useContext(LineWidthContext);\n  return (\n    <div className=\"ccc-pen\">\n      <div className=\"ccc-slider-item\">\n        <h3>Eraser thickness</h3>\n        <IntegerStep\n          min={1}\n          max={20}\n          value={lineSize}\n          onPropsChange={(value) => {\n            lineWidthContext.setLineSize(value);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Eraser;\n",{"ruleId":"146","severity":1,"message":"147","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":20},{"ruleId":"146","severity":1,"message":"150","line":1,"column":10,"nodeType":"148","messageId":"149","endLine":1,"endColumn":19},{"ruleId":"146","severity":1,"message":"151","line":30,"column":19,"nodeType":"148","messageId":"149","endLine":30,"endColumn":28},{"ruleId":"146","severity":1,"message":"152","line":30,"column":30,"nodeType":"148","messageId":"149","endLine":30,"endColumn":39},{"ruleId":"146","severity":1,"message":"153","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":24},{"ruleId":"146","severity":1,"message":"154","line":55,"column":5,"nodeType":"148","messageId":"149","endLine":55,"endColumn":11},{"ruleId":"146","severity":1,"message":"155","line":213,"column":15,"nodeType":"148","messageId":"149","endLine":213,"endColumn":25},{"ruleId":"146","severity":1,"message":"156","line":5,"column":10,"nodeType":"148","messageId":"149","endLine":5,"endColumn":22},{"ruleId":"146","severity":1,"message":"157","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":19},{"ruleId":"146","severity":1,"message":"158","line":40,"column":9,"nodeType":"148","messageId":"149","endLine":40,"endColumn":24},{"ruleId":"146","severity":1,"message":"150","line":4,"column":10,"nodeType":"148","messageId":"149","endLine":4,"endColumn":19},{"ruleId":"146","severity":1,"message":"159","line":17,"column":7,"nodeType":"148","messageId":"149","endLine":17,"endColumn":25},{"ruleId":"146","severity":1,"message":"160","line":20,"column":22,"nodeType":"148","messageId":"149","endLine":20,"endColumn":27},{"ruleId":"146","severity":1,"message":"158","line":24,"column":9,"nodeType":"148","messageId":"149","endLine":24,"endColumn":24},{"ruleId":"146","severity":1,"message":"157","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":19},"@typescript-eslint/no-unused-vars","'Ref' is defined but never used.","Identifier","unusedVar","'ColorType' is defined but never used.","'x' is defined but never used.","'y' is defined but never used.","'useMemo' is defined but never used.","'onSize' is assigned a value but never used.","'canvasData' is assigned a value but never used.","'MenuOutlined' is defined but never used.","'FC' is defined but never used.","'activeColorType' is assigned a value but never used.","'activeColorTypeCls' is assigned a value but never used.","'title' is assigned a value but never used."]