[{"/Users/jinmingliu/work/ccc-react-paint/src/index.tsx":"1","/Users/jinmingliu/work/ccc-react-paint/src/pages/index.tsx":"2","/Users/jinmingliu/work/ccc-react-paint/src/tool/index.tsx":"3","/Users/jinmingliu/work/ccc-react-paint/src/pages/header/index.tsx":"4","/Users/jinmingliu/work/ccc-react-paint/src/pages/content/index.tsx":"5","/Users/jinmingliu/work/ccc-react-paint/src/tool/tool.tsx":"6","/Users/jinmingliu/work/ccc-react-paint/src/tool/eraser.tsx":"7","/Users/jinmingliu/work/ccc-react-paint/src/tool/shape.tsx":"8","/Users/jinmingliu/work/ccc-react-paint/src/tool/Text.tsx":"9","/Users/jinmingliu/work/ccc-react-paint/src/tool/bucket.tsx":"10","/Users/jinmingliu/work/ccc-react-paint/src/pages/content/ToolType.tsx":"11","/Users/jinmingliu/work/ccc-react-paint/src/pages/content/Pencil.tsx":"12","/Users/jinmingliu/work/ccc-react-paint/src/pages/utils/tool.tsx":"13","/Users/jinmingliu/work/ccc-react-paint/src/tool/pen.tsx":"14","/Users/jinmingliu/work/ccc-react-paint/src/tool/colorChange.ts":"15","/Users/jinmingliu/work/ccc-react-paint/src/pages/content/canvas/index.tsx":"16","/Users/jinmingliu/work/ccc-react-paint/src/pages/utils/index.ts":"17","/Users/jinmingliu/work/ccc-react-paint/src/components/colorPicker/index.tsx":"18","/Users/jinmingliu/work/ccc-react-paint/src/pages/content/canvas/utils.tsx":"19","/Users/jinmingliu/work/ccc-react-paint/src/components/sliderCard/index.tsx":"20","/Users/jinmingliu/work/ccc-react-paint/src/Action.tsx":"21"},{"size":170,"mtime":1657545407822,"results":"22","hashOfConfig":"23"},{"size":2020,"mtime":1657541738788,"results":"24","hashOfConfig":"23"},{"size":234,"mtime":1657541738793,"results":"25","hashOfConfig":"23"},{"size":1343,"mtime":1657541738787,"results":"26","hashOfConfig":"23"},{"size":2062,"mtime":1657543494232,"results":"27","hashOfConfig":"23"},{"size":4218,"mtime":1657543425553,"results":"28","hashOfConfig":"23"},{"size":1259,"mtime":1657541738793,"results":"29","hashOfConfig":"23"},{"size":8713,"mtime":1657543428229,"results":"30","hashOfConfig":"23"},{"size":1567,"mtime":1657543422662,"results":"31","hashOfConfig":"23"},{"size":5737,"mtime":1657541738792,"results":"32","hashOfConfig":"23"},{"size":1286,"mtime":1657545481452,"results":"33","hashOfConfig":"23"},{"size":641,"mtime":1657541738783,"results":"34","hashOfConfig":"23"},{"size":13685,"mtime":1657541738789,"results":"35","hashOfConfig":"23"},{"size":1177,"mtime":1657541738794,"results":"36","hashOfConfig":"23"},{"size":3956,"mtime":1657541738792,"results":"37","hashOfConfig":"23"},{"size":10436,"mtime":1657543417901,"results":"38","hashOfConfig":"23"},{"size":379,"mtime":1657541738789,"results":"39","hashOfConfig":"23"},{"size":1909,"mtime":1657543523549,"results":"40","hashOfConfig":"23"},{"size":3931,"mtime":1657541738786,"results":"41","hashOfConfig":"23"},{"size":695,"mtime":1657541738781,"results":"42","hashOfConfig":"23"},{"size":268,"mtime":1657545561906,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1sw6yjp",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jinmingliu/work/ccc-react-paint/src/index.tsx",[],[],"/Users/jinmingliu/work/ccc-react-paint/src/pages/index.tsx",["99"],"import Header from \"./header\";\nimport Content from \"./content\";\nimport \"./index.less\";\nimport \"./font.css\";\nimport { useState, useEffect, useImperativeHandle } from \"react\";\nimport { Tool } from \"../tool\";\ninterface HomeProps {\n  backgroundColor?: string;\n  width?: number;\n  height?: number;\n  imgSrc?: string;\n  cRef?: any;\n  id: string;\n}\n\nfunction getImageSize(url: string): Promise<{\n  width: number;\n  height: number;\n}> {\n  return new Promise(function (resolve, reject) {\n    const image = new Image();\n    image.onload = function () {\n      resolve({\n        width: image.width,\n        height: image.height,\n      });\n    };\n    image.onerror = function () {\n      reject(new Error(\"error\"));\n    };\n    image.src = url;\n  });\n}\n\n//https://bafybeie3y4v25vj3owiqc5jxdhpcqld5klixy32fhcfytyfyve7k5ssyv4.ipfs.dweb.link/orign.png\n//\"https://bafybeicgvg3vwtv5c633cjexbykjp75yjt755qhma4o7vgusa4ldvocz44.ipfs.dweb.link/orign.png\",\nexport default (props: HomeProps) => {\n  const pre = `core-paint`;\n  const {\n    imgSrc = \"https://bafybeicgvg3vwtv5c633cjexbykjp75yjt755qhma4o7vgusa4ldvocz44.ipfs.dweb.link/orign.png\",\n    width = 500,\n    height = 500,\n    cRef,\n    id,\n  } = props;\n  const [size, setSize] = useState({ width, height });\n\n  const loadImgSize = async (src: string) => {\n    const size = await getImageSize(src);\n    setSize(size);\n  };\n\n  useImperativeHandle(cRef, () => ({\n    getCurrentImageData: () => {\n      // const canvasElem: any = document.getElementById(`ccc-paint-canvas ${id}`);\n      // const imageData = canvasElem.toDataURL(\"image/png\");\n      return Tool.canvas.toDataURL();\n    },\n  }));\n\n  useEffect(() => {\n    if (imgSrc) {\n      loadImgSize(imgSrc);\n    } else {\n      if (width && height) {\n        setSize({ width, height });\n      }\n    }\n  }, [width, height, imgSrc]);\n\n  return (\n    <div className={pre}>\n      <Header pre={pre} />\n      <Content\n        pre={pre}\n        canvasSize={size}\n        imgSrc={imgSrc}\n        backgroundColor={\"#fff\"}\n      />\n    </div>\n  );\n};\n","/Users/jinmingliu/work/ccc-react-paint/src/tool/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/pages/header/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/pages/content/index.tsx",["100","101","102","103","104","105"],"import { connect, useSelector, shallowEqual } from \"react-redux\";\nimport ToolType from \"./ToolType\";\nimport \"./index.less\";\nimport FabricJSCanvas from \"./canvas\";\nimport { RootState } from \"../../type\";\nimport Pencil from \"./Pencil\";\nimport Shape from \"./Shape\";\nimport Eraser from \"./Eraser\";\nimport Text from \"./Text\";\nimport FillColor from \"./FillColor\";\nimport { useState } from \"react\";\ninterface ContentProps {\n  pre: string;\n  //tool: string;\n  backgroundColor: string;\n  imgSrc?: string;\n  canvasSize: {\n    width: number;\n    height: number;\n  };\n  // straw : {\n  //   strawFlag: boolean;\n  //   strawColor: string;\n  // };\n}\n\nconst Content = (props: ContentProps) => {\n  const { pre, imgSrc, backgroundColor, canvasSize } = props;\n  //const [fillColor, setFillColor] = useState(board.fillColor);\n\n  const { tool, straw } = useSelector((state: RootState) => {\n    return {\n      tool: state.paint.tool.select,\n      straw: state.paint.straw,\n    };\n  }, shallowEqual);\n\n  const renderRight = () => {\n    let right = <>test</>;\n    switch (tool) {\n      case \"PEN\":\n        return <Pencil />;\n      // case \"SHAPE\":\n      //   return <Shape />;\n      // case \"ERASER\":\n      //   return <Eraser />;\n      // case \"TEXT\":\n      //   return <Text />;\n      // case \"BUCKET\":\n      //   return <FillColor />;\n      default:\n        break;\n    }\n    return right;\n  };\n\n  return (\n    <div className={`${pre}-content`}>\n      <ToolType prefix={`${pre}-content`} select={tool} />\n      <div className={`${pre}-content-canvas`}>\n        <FabricJSCanvas\n          canvasSize={canvasSize}\n          tool={tool}\n          imgSrc={imgSrc}\n          id=\"test\"\n          straw={straw}\n          backgroundColor={backgroundColor}\n        />\n      </div>\n      <div className={`${pre}-content-right`}>{renderRight()}</div>\n    </div>\n  );\n};\n\n// function mapStateToProps(state: RootState) {\n//   return {\n//     tool: state.paint.tool.select,\n//     straw: state.paint.straw,\n//   };\n// }\n\n// export default connect(mapStateToProps)(Content);\n\nexport default Content;\n","/Users/jinmingliu/work/ccc-react-paint/src/tool/tool.tsx",["106","107","108","109","110","111","112","113","114","115"],"import { fabric } from \"fabric\";\n//import Action from \"@/action\";\nimport { rgbToHex } from \"./colorChange\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface Pencil {\n  lineWidth: number;\n  strokeColor: string;\n}\n\n// 随机color\nexport const getRandomColor = () => {\n  return (\n    \"#\" + (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).substr(-6)\n  );\n};\n\n// strawColor\n\nexport const setStrawColor = (pos: Point) => {\n  const ctx = Tool.canvas.getContext();\n  const color = getPixelColorOnCanvas(pos, ctx);\n  Tool.strawColor = color;\n  Tool.strawFlag = false;\n  // Action.emit(\"paint.straw\", { strawColor: color, strawFlag: false });\n};\n//鼠标点颜色\nexport const getPixelColorOnCanvas = (\n  pos: Point,\n  ctx: CanvasRenderingContext2D\n) => {\n  const p = ctx.getImageData(pos.x, pos.y, 1, 1).data;\n  return rgbToHex(p[0], p[1], p[2], p[3]);\n};\n\nexport default class Tool {\n  //选择的工具\n  public toolType: string = \"PEN\";\n\n  // canvas\n  public static canvas: fabric.Canvas;\n  static toolType: string;\n  static img: fabric.Image;\n  static strawColor: string;\n  static strawFlag: boolean;\n  static canvasObj = [];\n\n  static recordTimer: any;\n  static stateArr: any[] = [];\n  static stateIdx: any = 0;\n  static transform: string;\n  static currentScale: number;\n  static ToolStoreList: any[] = [];\n  static imgSrc: string;\n  static nextCanvas: any = [];\n\n  // 撤销 或 还原\n  static tapHistoryBtn(flag: number) {\n    let current;\n    if (this.canvas) {\n      if (flag < 0 && this.ToolStoreList.length < 10) {\n        const tagCanvas = this.ToolStoreList.pop();\n        if (tagCanvas && this.canvas) {\n          this.nextCanvas.push(tagCanvas);\n          current = tagCanvas;\n        }\n      } else if (flag > 0 && this.nextCanvas.length > 0) {\n        //回到撤回前一步\n        const canvasData = this.nextCanvas.pop();\n        if (canvasData) {\n          current = canvasData;\n        }\n      }\n      if (current && this.canvas) {\n        let canvasTool: HTMLCanvasElement | undefined =\n          document.createElement(\"canvas\");\n        canvasTool.width = current.width;\n        canvasTool.height = current.height;\n        canvasTool?.getContext(\"2d\")?.putImageData(current, 0, 0);\n        const url = canvasTool.toDataURL();\n        this.canvas.clear();\n        this.canvas.setBackgroundImage(\n          url,\n          (img: any) => {\n            img.selectable = false;\n            img.evented = false;\n            this.canvas.renderAll();\n          },\n          { crossOrigin: \"anonymous\", scaleX: 0.5, scaleY: 0.5 }\n        );\n        canvasTool = undefined;\n      }\n    }\n\n    // if (this.canvas) {\n    //   if (flag < 0 && this.canvasObj.length < 10) {\n    //     const removeList =\n    //       this.canvas.getObjects().filter((c) => c.width) || [];\n    //     const tagCanvas = removeList[removeList.length - 1];\n    //     this.canvasObj.push(tagCanvas);\n    //     this.canvas.remove(tagCanvas);\n    //   } else if (flag > 0 && this.canvasObj.length > 0) {\n    //     //回到撤回前一步\n    //     const current = this.canvasObj.pop();\n    //     if (current) {\n    //       this.canvas.add(current);\n    //     }\n    //   }\n    // }\n  }\n\n  //清空画布\n  static clearAll() {\n    // 获取画布中的所有对象\n    if (this.canvas) {\n      if (this.ToolStoreList.length > 0) {\n        this.ToolStoreList = [];\n        this.nextCanvas = [];\n        this.canvas.clear();\n        this.canvas.setBackgroundImage(Tool.imgSrc, (img: any) => {\n          img.selectable = false;\n          img.evented = false;\n          this.canvas.renderAll();\n        });\n      }\n    }\n  }\n\n  public onMouseDown(options: any): void {\n    //\n  }\n  public onMouseMove(event: MouseEvent): void {\n    //\n  }\n\n  public onMouseUp(event: MouseEvent): void {\n    //\n  }\n\n  public onSelected(event: MouseEvent): void {}\n\n  public onCancelSelected(event: MouseEvent): void {}\n\n  //双击\n  public onDbClick(event: MouseEvent): void {}\n\n  public onTouchStart(event: TouchEvent): void {\n    //\n  }\n\n  public onTouchMove(event: TouchEvent): void {\n    //\n  }\n\n  public onTouchEnd(event: TouchEvent): void {\n    //\n  }\n\n  public onKeyDown(event: KeyboardEvent): void {\n    //\n  }\n}\n","/Users/jinmingliu/work/ccc-react-paint/src/tool/eraser.tsx",["116"],"import Tool, { getPixelColorOnCanvas, Point } from \"./tool\";\n//import \"libs/eraser_brush.mixin.js\"; // 本地地址进行引用即可\n\nclass Eraser extends Tool {\n  color: string | undefined;\n  constructor() {\n    super();\n    this.init();\n  }\n\n  init() {\n    Tool.canvas.interactive = false;\n\n    Tool.canvas.freeDrawingBrush.color = \"transparent\";\n    // Tool.canvas.freeDrawingBrush = new fabric.EraserBrush(Tool.canvas); // 使用橡皮擦画笔\n    Tool.canvas.isDrawingMode = true;\n    Tool.canvas.freeDrawingBrush.width = 20; // 设置画笔粗细为 20\n  }\n\n  //改变画笔的粗细\n  static setEraserStyle(value: number) {\n    this.canvas!.freeDrawingBrush.width = value;\n  }\n\n  private operateStart = (pointer: Point): void => {\n    const ctx = Tool.canvas.getContext();\n    const color = getPixelColorOnCanvas(pointer, ctx);\n    Tool.canvas.freeDrawingBrush.color = color;\n  };\n\n  public onMouseDown(options: any) {\n    if (Tool.toolType !== \"ERASER\") {\n      return;\n    }\n    const { e, absolutePointer } = options;\n    e.preventDefault();\n    Tool.canvas.freeDrawingBrush.color = \"transparent\";\n    const show = {\n      x: absolutePointer.x * 2,\n      y: absolutePointer.y * 2,\n    };\n    this.operateStart(show);\n  }\n}\n\nexport default Eraser;\n","/Users/jinmingliu/work/ccc-react-paint/src/tool/shape.tsx",["117","118"],"import Tool, { setStrawColor } from \"./tool\";\nimport { fabric } from \"fabric\";\nimport { Point } from \"./tool\";\n\nclass Shape extends Tool {\n  private shapeCurrent: any;\n  downPoints: Point;\n  upPoints: Point | undefined;\n  static shapeObject: Record<string, string> = {\n    shapeType: \"LINE\",\n    border: \"SOLID\",\n    color: \"#000\",\n  };\n  static selected: boolean = false;\n  static selectedList: any[];\n  constructor() {\n    super();\n    this.shapeCurrent = undefined;\n    this.downPoints = {\n      x: 0,\n      y: 0,\n    };\n    this.upPoints = {\n      x: 0,\n      y: 0,\n    };\n    this.init();\n  }\n\n  init() {\n    Tool.canvas.interactive = true;\n    Tool.canvas.isDrawingMode = false;\n  }\n\n  static changeShapeType(type: string, value: string) {\n    this.shapeObject[type] = value;\n    const { border } = Shape.shapeObject;\n\n    if (this.selected && this.selectedList.length > 0) {\n      this.selectedList.forEach((va) => {\n        if (type === \"color\") {\n          if (border === \"FILL\") {\n            va.set(\"fill\", value);\n            va.set(\"stroke\", value);\n          } else {\n            va.set(\"stroke\", value);\n          }\n        } else if (type === \"border\") {\n          va.set(\"strokeDashArray\", value === \"DOTTED\" ? [3, 3] : [0, 0]);\n        }\n      });\n      Tool.canvas.requestRenderAll();\n    }\n  }\n\n  createShape = (pointer: Point) => {\n    const { shapeType, border, color } = Shape.shapeObject;\n    const options: Record<string, string | number | number[]> = {\n      strokeDashArray: border === \"DOTTED\" ? [3, 3] : [0, 0],\n      stroke: Tool.strawColor || color, // 笔触颜色\n    };\n    if (border === \"FILL\") {\n      options.fill = Tool.strawColor || color;\n    }\n    switch (shapeType) {\n      case \"LINE\":\n        this.shapeCurrent = new fabric.Line(\n          [\n            pointer.x,\n            pointer.y, // 起始点坐标\n            pointer.x,\n            pointer.y, // 结束点坐标\n          ],\n          options\n        );\n        break;\n      case \"RECT\":\n        // 创建矩形\n        // 矩形参数计算\n        let top = Math.min(pointer.y, pointer.y);\n        let left = Math.min(pointer.x, pointer.x);\n        let width = Math.abs(pointer.x - pointer.x);\n        let height = Math.abs(pointer.y - pointer.y);\n        // 矩形对象\n        this.shapeCurrent = new fabric.Rect({\n          top,\n          left,\n          width,\n          height,\n          fill: \"transparent\",\n          strokeWidth: 1,\n          ...options,\n        });\n        break;\n      case \"CIRCLE\":\n        this.shapeCurrent = new fabric.Circle({\n          top: pointer.y,\n          left: pointer.x,\n          radius: 0,\n          fill: \"transparent\",\n          ...options,\n        });\n        break;\n      case \"TRIANGLE\":\n        this.shapeCurrent = new fabric.Triangle({\n          top: pointer.y,\n          left: pointer.x,\n          width: 0,\n          height: 0,\n          fill: \"transparent\",\n          ...options,\n        });\n        break;\n      case \"RHOMBUS\": //多边形\n        this.shapeCurrent = new fabric.Polygon(\n          [\n            { x: pointer.x, y: pointer.y },\n            { x: pointer.x, y: pointer.y },\n          ],\n          {\n            fill: \"transparent\",\n            objectCaching: false,\n            ...options,\n          }\n        );\n        break;\n    }\n\n    Tool.canvas.add(this.shapeCurrent);\n  };\n\n  changeShape = (pointer: Point) => {\n    const { shapeType } = Shape.shapeObject;\n    switch (shapeType) {\n      case \"LINE\":\n        if (this.shapeCurrent) {\n          this.shapeCurrent.set(\"x2\", pointer.x);\n          this.shapeCurrent.set(\"y2\", pointer.y);\n        }\n        break;\n      case \"RECT\":\n        if (this.shapeCurrent) {\n          this.shapeCurrent.set(\n            \"width\",\n            Math.abs(this.downPoints.x - pointer.x)\n          );\n          this.shapeCurrent.set(\n            \"height\",\n            Math.abs(this.downPoints.y - pointer.y)\n          );\n        }\n        break;\n      case \"CIRCLE\":\n        {\n          const radius =\n            Math.min(\n              Math.abs(this.downPoints.x - pointer.x),\n              Math.abs(this.downPoints.y - pointer.y)\n            ) / 2;\n          const top =\n            pointer.y > this.downPoints.y\n              ? this.downPoints.y\n              : this.downPoints.y - radius * 2;\n          const left =\n            pointer.x > this.downPoints.x\n              ? this.downPoints.x\n              : this.downPoints.x - radius * 2;\n\n          this.shapeCurrent.set(\"radius\", radius);\n          this.shapeCurrent.set(\"top\", top);\n          this.shapeCurrent.set(\"left\", left);\n        }\n        break;\n      case \"TRIANGLE\":\n        {\n          const width = Math.abs(this.downPoints.x - pointer.x);\n          const height = Math.abs(this.downPoints.y - pointer.y);\n          const top = Math.min(this.downPoints.y, pointer.y);\n          const left = Math.min(this.downPoints.x, pointer.x);\n          this.shapeCurrent.set(\"width\", width);\n          this.shapeCurrent.set(\"height\", height);\n          this.shapeCurrent.set(\"top\", top);\n          this.shapeCurrent.set(\"left\", left);\n        }\n        break;\n      case \"RHOMBUS\": //多边形\n        let points = this.shapeCurrent.points;\n        points.push({\n          x: pointer.x,\n          y: pointer.y,\n        });\n        break;\n    }\n    Tool.canvas.requestRenderAll();\n  };\n\n  // 多边形橡皮带\n  changePolygonBelt(pointer: Point) {\n    let points = this.shapeCurrent.points;\n    points[points.length - 1].x = pointer.x;\n    points[points.length - 1].y = pointer.y;\n    Tool.canvas.requestRenderAll();\n  }\n  // 完成多边形绘制\n  finishPolygon(pointer: Point) {\n    const { shapeType, border, color } = Shape.shapeObject;\n    const options = {\n      strokeDashArray: border === \"SOLID\" ? [0, 0] : [3, 3],\n      stroke: Tool.strawColor || color, // 笔触颜色\n    };\n    let points = this.shapeCurrent.points;\n    if (points[points.length - 1]) {\n      points[points.length - 1].x = pointer.x;\n      points[points.length - 1].y = pointer.y;\n    }\n\n    points.pop();\n    points.pop();\n    Tool.canvas.remove(this.shapeCurrent);\n    if (points.length > 1) {\n      let polygon = new fabric.Polygon(points, {\n        fill: \"transparent\",\n        ...options,\n      });\n\n      Tool.canvas.add(polygon);\n    }\n\n    this.shapeCurrent = null;\n    Tool.canvas.requestRenderAll();\n  }\n\n  onMouseDown(options: any): void {\n    if (Tool.toolType !== \"SHAPE\") {\n      return;\n    }\n    const { e, absolutePointer } = options;\n\n    this.downPoints = absolutePointer; //鼠标按下的位置\n    if (Tool.strawFlag) {\n      const show = {\n        x: absolutePointer.x * 2,\n        y: absolutePointer.y * 2,\n      };\n      setStrawColor(show);\n      return;\n    }\n    const { shapeType } = Shape.shapeObject;\n    e.preventDefault();\n    if (!Shape.selected) {\n      if (shapeType === \"RHOMBUS\") {\n        if (!this.shapeCurrent) {\n          this.createShape(absolutePointer);\n        } else {\n          this.changeShape(absolutePointer);\n        }\n      } else if (!this.shapeCurrent) {\n        this.createShape(absolutePointer);\n      }\n    }\n  }\n\n  public onMouseMove(options: any): void {\n    if (Tool.toolType === \"SHAPE\") {\n      const { e, absolutePointer } = options;\n      e.preventDefault();\n      const { shapeType } = Shape.shapeObject;\n      e.preventDefault();\n      if (this.shapeCurrent) {\n        if (shapeType === \"RHOMBUS\") {\n          this.changePolygonBelt(absolutePointer);\n        } else {\n          this.changeShape(absolutePointer);\n        }\n      }\n    }\n  }\n\n  public onMouseUp(options: any): void {\n    if (Tool.toolType !== \"SHAPE\") {\n      return;\n    }\n    const { e, absolutePointer } = options;\n    const { shapeType } = Shape.shapeObject;\n    e.preventDefault();\n    if (shapeType !== \"RHOMBUS\") {\n      this.upPoints = absolutePointer;\n      if (JSON.stringify(this.downPoints) === JSON.stringify(this.upPoints)) {\n        Tool.canvas.remove(this.shapeCurrent);\n      }\n      this.shapeCurrent = undefined;\n    }\n  }\n\n  public onDbClick(options: any): void {\n    if (Tool.toolType !== \"SHAPE\") {\n      return;\n    }\n    const { shapeType } = Shape.shapeObject;\n    const { e, absolutePointer } = options;\n    e.preventDefault();\n    if (shapeType === \"RHOMBUS\" && this.shapeCurrent) {\n      this.finishPolygon(absolutePointer);\n    }\n  }\n\n  public onSelected(options: any): void {\n    if (Tool.toolType !== \"SHAPE\") {\n      return;\n    }\n    Shape.selected = true;\n    Shape.selectedList = options.selected;\n  }\n  public onCancelSelected(options: any): void {\n    if (Tool.toolType !== \"SHAPE\") {\n      return;\n    }\n    Shape.selected = false;\n    Shape.selectedList = [];\n  }\n}\n\nexport default Shape;\n","/Users/jinmingliu/work/ccc-react-paint/src/tool/Text.tsx",["119","120"],"import { fabric } from \"fabric\";\nimport Tool, { Point, setStrawColor } from \"./tool\";\n\nclass CanvasText extends Tool {\n  textObject: any;\n  static textStyle: any;\n  selected: boolean;\n  constructor() {\n    super();\n    this.selected = false;\n    this.init();\n  }\n\n  init() {\n    Tool.canvas.interactive = true;\n  }\n\n  static changeTextStyle(type: any, value: any) {\n    CanvasText.textStyle = { ...CanvasText.textStyle, [type]: value };\n  }\n\n  initText(points: Point) {\n    const newObj = {\n      ...CanvasText.textStyle,\n    };\n    if (Tool.strawColor) {\n      newObj.fill = Tool.strawColor;\n    }\n    this.textObject = new fabric.Textbox(\"\", {\n      left: points.x,\n      top: points.y,\n      width: 150,\n      fontSize: 72,\n      ...newObj,\n      moveCursor: \"pointer\",\n    });\n    Tool.canvas.add(this.textObject);\n    this.textObject.enterEditing();\n  }\n\n  onMouseDown = (options: any) => {\n    if (Tool.toolType !== \"TEXT\") {\n      return;\n    }\n    const { e, pointer, absolutePointer } = options;\n    e.preventDefault();\n    if (Tool.strawFlag) {\n      const show = {\n        x: pointer.x * 2,\n        y: pointer.y * 2,\n      };\n      setStrawColor(show);\n      return;\n    }\n    if (!this.selected) {\n      if (!this.textObject) {\n        this.initText(absolutePointer);\n      } else {\n        this.textObject.exitEditing();\n        this.textObject = null;\n      }\n    }\n  };\n\n  public onSelected(options: any): void {\n    this.selected = true;\n  }\n  public onCancelSelected(options: any): void {\n    this.selected = false;\n  }\n}\n\nexport default CanvasText;\n","/Users/jinmingliu/work/ccc-react-paint/src/tool/bucket.tsx",["121","122"],"import Tool, { Point, setStrawColor } from \"./tool\";\nimport { parseColorString } from \"./colorChange\";\nimport { fabric } from \"fabric\";\n\n/**\n * 高效率的填充算法\n * 参考地址: http://www.williammalone.com/articles/html5-canvas-javascript-paint-bucket-tool/\n */\nexport const efficentFloodFill = (\n  imageData: ImageData,\n  startX: number,\n  startY: number,\n  fillColor: [number, number, number]\n) => {\n  // 保证 startX 和 startY 是正整数\n  // 经测试，在触屏设备中 startX 和 startY 可能是小数，造成填充功能无法正确填充\n  startX = Math.round(startX);\n  startY = Math.round(startY);\n  const pixelStack: [number, number][] = [\n    [Math.round(startX), Math.round(startY)],\n  ];\n  const canvasWidth = imageData.width,\n    canvasHeight = imageData.height;\n  const startPos = (startY * canvasWidth + startX) * 4;\n  const colorLayer = imageData;\n  const startColor: [number, number, number] = [\n    colorLayer.data[startPos],\n    colorLayer.data[startPos + 1],\n    colorLayer.data[startPos + 2],\n  ];\n  const updatedPoint: Record<string | number, boolean> = {};\n  if (\n    startColor[0] === fillColor[0] &&\n    startColor[1] === fillColor[1] &&\n    startColor[2] === fillColor[2]\n  ) {\n    return undefined;\n  }\n  while (pixelStack.length > 0) {\n    const newPos = pixelStack.pop() as [number, number];\n    const x = newPos[0];\n    let y = newPos[1];\n    let pixelPos = (y * canvasWidth + x) * 4;\n    while (y-- >= 0 && matchColor(colorLayer, pixelPos, startColor)) {\n      pixelPos -= canvasWidth * 4;\n    }\n    pixelPos += canvasWidth * 4;\n    ++y;\n    let reachLeft = false,\n      reachRight = false;\n\n    if (updatedPoint[pixelPos]) {\n      continue;\n    }\n    updatedPoint[pixelPos] = true;\n    // newData.push(pixelPos);\n    while (\n      y++ < canvasHeight - 1 &&\n      matchColor(colorLayer, pixelPos, startColor)\n    ) {\n      fillPixel(colorLayer, pixelPos, fillColor);\n      if (x > 0) {\n        if (matchColor(colorLayer, pixelPos - 4, startColor)) {\n          if (!reachLeft) {\n            pixelStack.push([x - 1, y]);\n            reachLeft = true;\n          }\n        } else if (reachLeft) {\n          reachLeft = false;\n        }\n      }\n\n      if (x < canvasWidth - 1) {\n        if (matchColor(colorLayer, pixelPos + 4, startColor)) {\n          if (!reachRight) {\n            pixelStack.push([x + 1, y]);\n            reachRight = true;\n          }\n        } else if (reachRight) {\n          reachRight = false;\n        }\n      }\n\n      pixelPos += canvasWidth * 4;\n    }\n  }\n  return colorLayer;\n};\n\n/**\n * 判断两个位置的像素颜色是否相同\n */\nconst matchColor = (\n  colorLayer: ImageData,\n  pixelPos: number,\n  color: [number, number, number]\n) => {\n  const r = colorLayer.data[pixelPos];\n  const g = colorLayer.data[pixelPos + 1];\n  const b = colorLayer.data[pixelPos + 2];\n\n  return (\n    Math.abs(r - color[0]) < 30 &&\n    Math.abs(g - color[1]) < 30 &&\n    Math.abs(b - color[2]) < 30\n  );\n};\n\n/**\n * 修改指定ImageData的指定位置像素颜色\n */\nconst fillPixel = (\n  colorLayer: ImageData,\n  pixelPos: number,\n  color: [number, number, number]\n) => {\n  colorLayer.data[pixelPos] = color[0];\n  colorLayer.data[pixelPos + 1] = color[1];\n  colorLayer.data[pixelPos + 2] = color[2];\n\n  return colorLayer;\n};\n\nclass Bucket extends Tool {\n  static color: string = \"transparent\";\n  constructor() {\n    super();\n    this.init();\n  }\n\n  static changeColor = (color: string) => {\n    this.color = color;\n  };\n\n  init() {\n    Tool.canvas.interactive = false;\n    Tool.canvas.isDrawingMode = false;\n  }\n\n  filterChange = async (pos: Point) => {\n    const color = parseColorString(Tool.strawColor || Bucket.color);\n    const showCtx = Tool.canvas.getContext();\n    const colorLayer = efficentFloodFill(\n      showCtx.getImageData(0, 0, showCtx.canvas.width, showCtx.canvas.height),\n      pos.x * 2,\n      pos.y * 2,\n      [color.r, color.g, color.b]\n    );\n    if (colorLayer) {\n      showCtx.putImageData(colorLayer, 0, 0);\n      let canvasBucket: HTMLCanvasElement | undefined =\n        document.createElement(\"canvas\");\n      canvasBucket.width = colorLayer.width;\n      canvasBucket.height = colorLayer.height;\n      canvasBucket?.getContext(\"2d\")?.putImageData(colorLayer, 0, 0);\n      const url = canvasBucket.toDataURL();\n      Tool.canvas.setBackgroundImage(\n        url,\n        (img: any) => {\n          img.selectable = false;\n          img.evented = false;\n          Tool.canvas.renderAll();\n        },\n        { crossOrigin: \"anonymous\", scaleX: 0.5, scaleY: 0.5 }\n      );\n      canvasBucket = undefined;\n    }\n\n    // const filter = new fabric.Image.filters[\"ChangeColorFilter\"]({\n    //   pos,\n    //   fillColor: [color.r, color.g, color.b],\n    // });\n    // Tool.img.filters.push(filter);\n    // //Tool.img.filters.push(new fabric.Image.filters.Grayscale());\n    // Tool.img.applyFilters();\n    // Tool.canvas.renderAll();\n  };\n\n  public onMouseDown(options: any): void {\n    if (Tool.toolType !== \"BUCKET\") {\n      return;\n    }\n    const { e, pointer, absolutePointer } = options;\n    e.preventDefault();\n    if (Tool.strawFlag) {\n      const show = {\n        x: absolutePointer.x * 2,\n        y: absolutePointer.y * 2,\n      };\n      setStrawColor(show);\n      return;\n    }\n    this.filterChange(absolutePointer);\n  }\n  // public onMouseUp(event: MouseEvent): void {\n  //   if (Tool.toolType !== \"BUCKET\") {\n  //     return;\n  //   }\n  //   if (Tool.ToolStoreList.length >= 10) {\n  //     Tool.ToolStoreList.shift();\n  //     Tool.ToolStoreList.push(Tool.canvas.toDataURL());\n  //   } else {\n  //     console.log(\"==4\", Tool.canvas.toDataURL());\n  //     Tool.ToolStoreList.push(Tool.canvas.toDataURL());\n  //   }\n  // }\n}\n\nexport default Bucket;\n","/Users/jinmingliu/work/ccc-react-paint/src/pages/content/ToolType.tsx",["123"],"import { store } from \"../../Action\";\nimport { ToolTypeList } from \"../utils\";\nimport { getToolIcon } from \"../utils/tool\";\nimport { toolItem } from \"../utils/tsType\";\n//import Action from \"@/action\";\n\ninterface ToolProps {\n  prefix: string;\n  select?: string;\n  color?: string;\n}\n\nconst ToolType = (props: ToolProps) => {\n  const { prefix, select, color } = props;\n\n  return (\n    <ul className={`${prefix}-tool`}>\n      {ToolTypeList.map((va: toolItem) => {\n        return (\n          <li\n            title={va.title}\n            className={`${\n              select === va.key ? \"tool-item select\" : \"tool-item\"\n            }`}\n            key={va.key}\n            onClick={() => {\n              store.dispatch(\"paint.tool\", { select: va.key });\n              // Action.emit(\"paint.tool\", {\n              //   select: va.key,\n              // });\n            }}\n          >\n            <span style={{ position: \"relative\", display: \"inline-block\" }}>\n              {getToolIcon(va.icon)}\n              {va.key === \"BUCKET\" && (\n                <span\n                  className=\"bucket-icon\"\n                  //style={{ backgroundColor: color }}\n                />\n              )}\n            </span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ToolType;\n","/Users/jinmingliu/work/ccc-react-paint/src/pages/content/Pencil.tsx",["124"],"import Sider from \"../../components/sliderCard\";\nimport ColorPicker from \"../../components/colorPicker\";\nimport { Pen, Tool } from \"@/tool\";\n\nconst Pencil = () => {\n  const handleChange = (type: string, value: number | string) => {\n    Pen.setPenStyle(type, value);\n  };\n\n  return (\n    <>\n      <Sider\n        title=\"Brush thickness\"\n        options={{ max: 200, min: 1 }}\n        defaultValue={20}\n        onChange={(value: number) => handleChange(\"lineWidth\", value)}\n      />\n      <ColorPicker\n        color={Pen.color}\n        onChange={(color: string) => handleChange(\"color\", color)}\n      />\n    </>\n  );\n};\n\nexport default Pencil;\n","/Users/jinmingliu/work/ccc-react-paint/src/pages/utils/tool.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/tool/pen.tsx",["125"],"import Tool, { getRandomColor, setStrawColor } from \"./tool\";\n\nclass Pen extends Tool {\n  static color: string = getRandomColor();\n  static lineWidth: number = 20;\n  //改变画笔的状态\n  constructor() {\n    super();\n    this.init();\n  }\n\n  init() {\n    console.log(\"pen init\", Tool.strawColor);\n    if (!Tool.canvas.isDrawingMode) {\n      Tool.canvas.isDrawingMode = true;\n    }\n    Tool.canvas.interactive = false;\n    Tool.canvas.freeDrawingBrush.color = Tool.strawColor || Pen.color;\n    Tool.canvas.freeDrawingBrush.width = Pen.lineWidth;\n  }\n\n  static setPenStyle(type: string, value: any) {\n    Pen[type] = value;\n    if (type === \"lineWidth\") {\n      Tool.canvas.freeDrawingBrush.width = value;\n    } else {\n      Tool.canvas.freeDrawingBrush.color = value;\n    }\n  }\n\n  public onMouseDown = (options: any) => {\n    const { e, pointer, absolutePointer } = options;\n    e.preventDefault();\n    if (Tool.toolType === \"PEN\") {\n      if (Tool.strawFlag) {\n        const show = {\n          x: absolutePointer.x * 2,\n          y: absolutePointer.y * 2,\n        };\n        setStrawColor(show);\n      } else {\n        this.init();\n      }\n    }\n  };\n}\n\nexport default Pen;\n","/Users/jinmingliu/work/ccc-react-paint/src/tool/colorChange.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/pages/content/canvas/index.tsx",["126","127","128","129","130","131"],"import { fabric } from \"fabric\";\nimport { Tool, Pen, Shape, Eraser, Bucket, CanvasText } from \"@/tool\";\nimport { useEffect, useRef, useState } from \"react\";\nimport cursorPen from \"@/assets/icon/cursorPen.jpg\";\nimport cursorErase from \"@/assets/icon/cursorErase.jpg\";\nimport straw_jpg from \"@/assets/icon/straw.jpg\";\nimport bucket from \"@/assets/icon/bucket.jpg\";\n\nimport { efficentFloodFill, getTrans } from \"./utils\";\nimport \"./index.less\";\nimport ToolType from \"../ToolType\";\n\nlet translatex = 0;\nlet translatey = 0;\nlet show_scale = 1;\nconst scaleStep = 0.01;\nconst maxScale = 6;\nconst minScale = 0.1;\n\n/*设置为2d模块 如不设置 默认webgl 为true*/\nconst canvas2dBackend = new fabric.Canvas2dFilterBackend();\nfabric.filterBackend = canvas2dBackend;\n\n/*filter*/\nfabric.Image.filters[\"ChangeColorFilter\"] = fabric.util.createClass(\n  fabric.Image.filters.BaseFilter,\n  {\n    type: \"ChangeColorFilter\",\n    applyTo: function (options: any) {\n      let imageData = options.imageData;\n      // const context = options.canvasEl.getContext(\"2d\");\n      // const newimageData = context.getImageData(\n      //   0,\n      //   0,\n      //   options.canvasEl.width,\n      //   options.canvasEl.height\n      // );\n      // const ctx = options.ctx;\n      if (this.fillColor && this.pos) {\n        imageData = efficentFloodFill(\n          imageData,\n          this.pos.x,\n          this.pos.y,\n          this.fillColor\n        );\n      }\n      options.ctx.putImageData(this.ctx || imageData, 0, 0);\n    },\n  }\n);\n\nfabric.Image.filters[\"ChangeColorFilter\"].fromObject = function (object: any) {\n  return new fabric.Image.filters[\"ChangeColorFilter\"](object);\n};\n\ninterface CanvasProps {\n  backgroundColor?: string;\n  canvasSize: {\n    width: number;\n    height: number;\n  };\n  imgSrc?: string;\n  tool: string;\n  id?: string;\n  straw: {\n    strawFlag: boolean;\n    strawColor: string;\n  };\n}\nexport default (props: CanvasProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasBoxRef = useRef<HTMLDivElement>(null);\n  const [manager, setManage] = useState<Tool>();\n  const [fabricCanvas, setCanvas] = useState<fabric.Canvas>();\n  const { canvasSize, imgSrc, backgroundColor, tool, id, straw } = props;\n  useEffect(() => {\n    const canvasBox = canvasBoxRef.current;\n    const canvasCurrent = canvasRef.current;\n    if (canvasBox && canvasCurrent) {\n      const { width, height } = canvasBox!.getBoundingClientRect();\n      if (canvasSize && canvasCurrent) {\n        const showScale =\n          Math.min(width, height) /\n            Math.max(canvasSize.height, canvasSize.width) || 1;\n        translatex = (width - canvasSize.width * showScale) / 2;\n        translatey = (height - canvasSize.height * showScale) / 2;\n        canvasCurrent.style.transform = `scale(${showScale}) translate(${translatex}px,${translatey}px)`;\n        show_scale = showScale;\n        //初始化画布\n        const canvas = new fabric.Canvas(canvasCurrent, {\n          width: canvasSize.width, // 画布宽度\n          height: canvasSize.height, // 画布高度\n          backgroundColor: backgroundColor || \"#2d2d2d\", // 画布背景色\n        });\n\n        Tool.canvas = canvas;\n        Tool.transform = `scale(${showScale}) translate(${translatex}px,${translatey}px)`;\n        Tool.currentScale = showScale;\n        canvas.freeDrawingCursor = `url(${cursorPen}) 12 16,auto`;\n        setManage(new Pen());\n        if (imgSrc) {\n          Tool.imgSrc = imgSrc;\n          fabric.Image.fromURL(\n            imgSrc,\n            (img) => {\n              img.selectable = false;\n              img.evented = false;\n              img.width = canvasSize.width;\n              img.filters?.push(\n                new fabric.Image.filters[\"ChangeColorFilter\"]()\n              );\n              img.applyFilters();\n              Tool.img = img;\n              canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n            },\n            { crossOrigin: \"anonymous\" }\n          );\n        }\n        setCanvas(canvas);\n      }\n    }\n  }, [canvasSize]);\n\n  useEffect(() => {\n    Tool.toolType = tool;\n    if (fabricCanvas) {\n      switch (tool) {\n        case \"PEN\":\n          // 开启绘画功能\n          setManage(new Pen());\n          break;\n        case \"SHAPE\":\n          //关闭绘画功能\n          setManage(new Shape());\n          break;\n        case \"ERASER\":\n          setManage(new Eraser());\n          break;\n        case \"BUCKET\":\n          setManage(new Bucket());\n          break;\n        case \"TEXT\":\n          Tool.canvas.isDrawingMode = false;\n          setManage(new CanvasText());\n          break;\n      }\n    }\n  }, [tool]);\n\n  useEffect(() => {\n    if (fabricCanvas) {\n      if (straw.strawFlag) {\n        fabricCanvas.freeDrawingCursor = `url(${straw_jpg}) 6 20,auto`;\n      } else {\n        switch (tool) {\n          case \"PEN\":\n            // 开启绘画功能\n            fabricCanvas.freeDrawingCursor = `url(${cursorPen}) 12 16,auto`;\n            break;\n          case \"ERASER\":\n            fabricCanvas.freeDrawingCursor = `url(${cursorErase}) 12 16,auto`;\n            break;\n          case \"BUCKET\":\n            fabricCanvas.defaultCursor = `url(${bucket}) 12 16,auto`;\n            break;\n          default:\n            fabricCanvas.defaultCursor = \"default\";\n        }\n      }\n    }\n  }, [tool, straw.strawFlag]);\n\n  const clacCanvasTransform = (\n    scale: number,\n    translatex: number,\n    translatey: number\n  ) => {\n    const upEleCanvasList =\n      document.getElementsByClassName(\"upper-canvas\") || [];\n    let upEleCanvas;\n\n    for (let i = 0; i < upEleCanvasList.length; i++) {\n      if (upEleCanvasList[i]?.clientWidth === canvasSize.width) {\n        upEleCanvas = upEleCanvasList[i];\n        break;\n      }\n    }\n    //\n    const new_translatex = Number((translatex / scale).toFixed(3));\n    const new_translatey = Number((translatey / scale).toFixed(3));\n\n    if (upEleCanvas) {\n      upEleCanvas[\n        \"style\"\n      ].transform = `scale(${scale}) translate(${new_translatex}px,${new_translatey}px)`;\n    }\n  };\n\n  const onMouseDown = (options: any) => {\n    if (manager) {\n      manager.onMouseDown(options);\n    }\n  };\n  const onMouseMove = (options: any) => {\n    if (manager && tool === \"SHAPE\") {\n      manager.onMouseMove(options);\n    }\n  };\n\n  const onMouseUp = (options: any) => {\n    if (manager) {\n      const ctx = Tool.canvas.getContext();\n      const imageData = ctx.getImageData(\n        0,\n        0,\n        ctx.canvas.width,\n        ctx.canvas.height\n      );\n      if (Tool.ToolStoreList.length < 10) {\n        Tool.ToolStoreList.push(imageData);\n      } else {\n        Tool.ToolStoreList.shift();\n        Tool.ToolStoreList.push(imageData);\n      }\n      manager.onMouseUp(options);\n    }\n  };\n\n  const onSelected = (options: any) => {\n    if (manager && tool === \"SHAPE\") {\n      manager.onSelected(options);\n    }\n  };\n\n  const onCancelSelected = (options: any) => {\n    if (manager) {\n      manager.onCancelSelected(options);\n    }\n  };\n\n  const onDbClick = (options: any) => {\n    if (manager) {\n      manager.onDbClick(options);\n    }\n  };\n\n  const onWheel = (options: any) => {\n    const { e: event } = options;\n    event.preventDefault();\n    const canvas = canvasRef.current;\n    const container = canvasBoxRef!.current;\n    const { clientX, clientY, deltaX, deltaY, ctrlKey } = event;\n    const { width, height, x, y } = container!.getBoundingClientRect();\n    let newScale;\n    if (canvas) {\n      if (ctrlKey) {\n        //双指放大缩小\n        if (deltaY < 0) {\n          newScale = show_scale + scaleStep;\n          newScale = Math.min(newScale, maxScale);\n        } else {\n          newScale = show_scale - scaleStep;\n          newScale = Math.max(newScale, minScale);\n        }\n        const transX = getTrans(\n          clientX,\n          newScale,\n          \"width\",\n          canvasSize,\n          {\n            width,\n            height,\n            x,\n            y,\n          },\n          show_scale,\n          translatex,\n          translatey\n        );\n        const transY = getTrans(\n          clientY,\n          newScale,\n          \"height\",\n          canvasSize,\n          {\n            width,\n            height,\n            x,\n            y,\n          },\n          show_scale,\n          translatex,\n          translatey\n        );\n        translatex = translatex - transX;\n        translatey = translatey - transY;\n        show_scale = newScale;\n        canvas.style.transform = `translate(${translatex}px, ${translatey}px) scale(${show_scale})`;\n        clacCanvasTransform(newScale, translatex, translatey);\n      }\n    }\n  };\n\n  const onCanvasBoxWheel = (event: WheelEvent) => {\n    event.preventDefault();\n    const { deltaX, deltaY, ctrlKey } = event;\n    const canvas = canvasRef.current;\n    if (!ctrlKey) {\n      if (!!deltaX && !deltaY) {\n        // if (translatex > 0 && translatex < width) {\n        // 左右移动 向右 -deltaX < 0  向左   >0\n        translatex = Number((translatex - deltaX).toFixed(3));\n        // }\n      } else if (!!deltaY && !deltaX) {\n        // if (translatey > 0 && translatex < height) {\n        // 左右移动 向右 -deltaX < 0  向左   >0\n        translatey = Number((translatey - deltaY).toFixed(3));\n        // }\n      }\n      canvas!.style.transform = `translate(${translatex}px, ${translatey}px) scale(${show_scale})`;\n      clacCanvasTransform(show_scale, translatex, translatey);\n    }\n  };\n\n  useEffect(() => {\n    const canvasBox = canvasBoxRef.current;\n    if (fabricCanvas && canvasBox) {\n      fabricCanvas.on(\"mouse:down\", onMouseDown);\n      fabricCanvas.on(\"mouse:move\", onMouseMove);\n      fabricCanvas.on(\"mouse:up\", onMouseUp);\n      //双击\n      fabricCanvas.on(\"mouse:dblclick\", onDbClick);\n\n      //缩放\n      fabricCanvas.on(\"mouse:wheel\", onWheel);\n      canvasBox.addEventListener(\"wheel\", onCanvasBoxWheel, {\n        passive: false,\n      });\n\n      // 监听绘画选中/取消⌚️\n      fabricCanvas.on(\"selection:created\", onSelected);\n      fabricCanvas.on(\"selection:cleared\", onCancelSelected);\n    }\n  }, [\n    fabricCanvas,\n    onMouseDown,\n    onMouseMove,\n    onMouseUp,\n    onDbClick,\n    onSelected,\n    onCancelSelected,\n  ]);\n\n  return (\n    <div className=\"ccc-canvas-box\" ref={canvasBoxRef}>\n      <canvas\n        ref={canvasRef}\n        className=\"ccc-paint-canvas\"\n        id={`ccc-paint-canvas ${id}`}\n      ></canvas>\n    </div>\n  );\n};\n","/Users/jinmingliu/work/ccc-react-paint/src/pages/utils/index.ts",[],"/Users/jinmingliu/work/ccc-react-paint/src/components/colorPicker/index.tsx",["132","133","134","135"],"import { useState, useEffect } from \"react\";\nimport { SketchPicker } from \"react-color\";\nimport { toHexString } from \"../../tool/colorChange\";\nimport \"./index.less\";\nimport { getToolIcon } from \"../../pages/utils/tool\";\n//import Action from \"@/action\";\nimport { connect, useSelector, shallowEqual } from \"react-redux\";\nimport { RootState, StrawState } from \"../../type\";\nimport { Tool } from \"@/tool\";\n\ninterface ColorProps {\n  color: string;\n  onChange: (color: string) => void;\n  //straw: StrawState;\n}\n\nconst ColorPicker = (props: ColorProps) => {\n  const { color, onChange } = props;\n  const [showColor, setColor] = useState(color);\n\n  const { straw } = useSelector((state: RootState) => {\n    console.log(\"select---\", state);\n    return {\n      straw: state.paint.straw,\n    };\n  }, shallowEqual);\n\n  const handleChange = (color: any, event: any) => {\n    if (Tool.strawColor !== \"\") {\n      Tool.strawColor = \"\";\n    }\n    const hexColor: string = toHexString(color.rgb);\n    setColor(hexColor);\n    onChange(hexColor);\n  };\n\n  useEffect(() => {\n    setColor(straw.strawColor);\n  }, [straw.strawColor]);\n\n  useEffect(() => {\n    setColor(color);\n  }, [color]);\n\n  return (\n    <div className=\"colorBox\">\n      <h3>Color</h3>\n      <SketchPicker\n        className=\"colorBox-picker\"\n        width=\"100%\"\n        disableAlpha={false}\n        color={showColor}\n        onChange={handleChange}\n      />\n      <span\n        className={`straw-color ${straw.strawFlag ? \"selected-straw\" : \"\"}`}\n        onClick={() => {\n          Tool.strawFlag = true;\n\n          // Action.emit(\"paint.straw\", {\n          //   strawFlag: true,\n          // });\n        }}\n      >\n        {getToolIcon(\"strawIcon\")}\n      </span>\n    </div>\n  );\n};\nfunction mapStateToProps(state: RootState) {\n  return {\n    straw: state.paint.straw,\n  };\n}\n\n//export default connect(mapStateToProps)(ColorPicker);\n\nexport default ColorPicker;\n","/Users/jinmingliu/work/ccc-react-paint/src/pages/content/canvas/utils.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/components/sliderCard/index.tsx",[],"/Users/jinmingliu/work/ccc-react-paint/src/Action.tsx",[],{"ruleId":"136","severity":1,"message":"137","line":44,"column":5,"nodeType":"138","messageId":"139","endLine":44,"endColumn":7},{"ruleId":"136","severity":1,"message":"140","line":1,"column":10,"nodeType":"138","messageId":"139","endLine":1,"endColumn":17},{"ruleId":"136","severity":1,"message":"141","line":7,"column":8,"nodeType":"138","messageId":"139","endLine":7,"endColumn":13},{"ruleId":"136","severity":1,"message":"142","line":8,"column":8,"nodeType":"138","messageId":"139","endLine":8,"endColumn":14},{"ruleId":"136","severity":1,"message":"143","line":9,"column":8,"nodeType":"138","messageId":"139","endLine":9,"endColumn":12},{"ruleId":"136","severity":1,"message":"144","line":10,"column":8,"nodeType":"138","messageId":"139","endLine":10,"endColumn":17},{"ruleId":"136","severity":1,"message":"145","line":11,"column":10,"nodeType":"138","messageId":"139","endLine":11,"endColumn":18},{"ruleId":"136","severity":1,"message":"146","line":133,"column":22,"nodeType":"138","messageId":"139","endLine":133,"endColumn":34},{"ruleId":"136","severity":1,"message":"147","line":136,"column":22,"nodeType":"138","messageId":"139","endLine":136,"endColumn":39},{"ruleId":"136","severity":1,"message":"147","line":140,"column":20,"nodeType":"138","messageId":"139","endLine":140,"endColumn":37},{"ruleId":"136","severity":1,"message":"147","line":144,"column":21,"nodeType":"138","messageId":"139","endLine":144,"endColumn":38},{"ruleId":"136","severity":1,"message":"147","line":146,"column":27,"nodeType":"138","messageId":"139","endLine":146,"endColumn":44},{"ruleId":"136","severity":1,"message":"147","line":149,"column":20,"nodeType":"138","messageId":"139","endLine":149,"endColumn":37},{"ruleId":"136","severity":1,"message":"147","line":151,"column":23,"nodeType":"138","messageId":"139","endLine":151,"endColumn":40},{"ruleId":"136","severity":1,"message":"147","line":155,"column":22,"nodeType":"138","messageId":"139","endLine":155,"endColumn":39},{"ruleId":"136","severity":1,"message":"147","line":159,"column":21,"nodeType":"138","messageId":"139","endLine":159,"endColumn":38},{"ruleId":"136","severity":1,"message":"147","line":163,"column":20,"nodeType":"138","messageId":"139","endLine":163,"endColumn":40},{"ruleId":"148","severity":1,"message":"149","line":22,"column":5,"nodeType":"150","messageId":"151","endLine":22,"endColumn":17,"suggestions":"152"},{"ruleId":"136","severity":1,"message":"153","line":206,"column":13,"nodeType":"138","messageId":"139","endLine":206,"endColumn":22},{"ruleId":"136","severity":1,"message":"146","line":314,"column":27,"nodeType":"138","messageId":"139","endLine":314,"endColumn":39},{"ruleId":"136","severity":1,"message":"146","line":65,"column":21,"nodeType":"138","messageId":"139","endLine":65,"endColumn":33},{"ruleId":"136","severity":1,"message":"146","line":68,"column":27,"nodeType":"138","messageId":"139","endLine":68,"endColumn":39},{"ruleId":"136","severity":1,"message":"154","line":3,"column":10,"nodeType":"138","messageId":"139","endLine":3,"endColumn":16},{"ruleId":"136","severity":1,"message":"155","line":183,"column":16,"nodeType":"138","messageId":"139","endLine":183,"endColumn":23},{"ruleId":"136","severity":1,"message":"156","line":14,"column":27,"nodeType":"138","messageId":"139","endLine":14,"endColumn":32},{"ruleId":"136","severity":1,"message":"157","line":3,"column":15,"nodeType":"138","messageId":"139","endLine":3,"endColumn":19},{"ruleId":"136","severity":1,"message":"155","line":32,"column":16,"nodeType":"138","messageId":"139","endLine":32,"endColumn":23},{"ruleId":"136","severity":1,"message":"158","line":11,"column":8,"nodeType":"138","messageId":"139","endLine":11,"endColumn":16},{"ruleId":"148","severity":1,"message":"149","line":80,"column":33,"nodeType":"150","messageId":"151","endLine":80,"endColumn":43,"suggestions":"159"},{"ruleId":"148","severity":1,"message":"149","line":251,"column":23,"nodeType":"150","messageId":"151","endLine":251,"endColumn":36,"suggestions":"160"},{"ruleId":"136","severity":1,"message":"161","line":252,"column":31,"nodeType":"138","messageId":"139","endLine":252,"endColumn":37},{"ruleId":"148","severity":1,"message":"149","line":253,"column":37,"nodeType":"150","messageId":"151","endLine":253,"endColumn":47,"suggestions":"162"},{"ruleId":"148","severity":1,"message":"149","line":320,"column":7,"nodeType":"150","messageId":"151","endLine":320,"endColumn":14,"suggestions":"163"},{"ruleId":"136","severity":1,"message":"140","line":7,"column":10,"nodeType":"138","messageId":"139","endLine":7,"endColumn":17},{"ruleId":"136","severity":1,"message":"164","line":8,"column":21,"nodeType":"138","messageId":"139","endLine":8,"endColumn":31},{"ruleId":"136","severity":1,"message":"147","line":28,"column":37,"nodeType":"138","messageId":"139","endLine":28,"endColumn":47},{"ruleId":"136","severity":1,"message":"165","line":70,"column":10,"nodeType":"138","messageId":"139","endLine":70,"endColumn":25},"@typescript-eslint/no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'connect' is defined but never used.","'Shape' is defined but never used.","'Eraser' is defined but never used.","'Text' is defined but never used.","'FillColor' is defined but never used.","'useState' is defined but never used.","'options' is defined but never used.","'event' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["166"],"'shapeType' is assigned a value but never used.","'fabric' is defined but never used.","'pointer' is assigned a value but never used.","'color' is assigned a value but never used.","'Tool' is defined but never used.","'ToolType' is defined but never used.",["167"],["168"],"'deltaX' is assigned a value but never used.",["169"],["170"],"'StrawState' is defined but never used.","'mapStateToProps' is defined but never used.",{"messageId":"171","fix":"172","desc":"173"},{"messageId":"171","fix":"174","desc":"173"},{"messageId":"171","fix":"175","desc":"173"},{"messageId":"171","fix":"176","desc":"173"},{"messageId":"171","fix":"177","desc":"173"},"suggestOptionalChain",{"range":"178","text":"179"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"180","text":"179"},{"range":"181","text":"179"},{"range":"182","text":"179"},{"range":"183","text":"179"},[586,587],"?",[2385,2386],[7190,7191],[7311,7312],[9144,9145]]